"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpGatewayRoutePathMatch = exports.HttpRoutePathMatch = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Defines HTTP route matching based on the URL path of the request.
 *
 * @stability stable
 */
class HttpRoutePathMatch {
    /**
     * The value of the path must match the specified value exactly.
     *
     * The provided `path` must start with the '/' character.
     *
     * @param path the exact path to match on.
     * @stability stable
     */
    static exactly(path) {
        return new HttpRouteWholePathMatch({ exact: path });
    }
    /**
     * The value of the path must match the specified regex.
     *
     * @param regex the regex used to match the path.
     * @stability stable
     */
    static regex(regex) {
        return new HttpRouteWholePathMatch({ regex: regex });
    }
    /**
     * The value of the path must match the specified prefix.
     *
     * @param prefix the value to use to match the beginning of the path part of the URL of the request.
     * @stability stable
     */
    static startsWith(prefix) {
        return new HttpRoutePrefixPathMatch(prefix);
    }
}
exports.HttpRoutePathMatch = HttpRoutePathMatch;
_a = JSII_RTTI_SYMBOL_1;
HttpRoutePathMatch[_a] = { fqn: "aws-cdk-lib.aws_appmesh.HttpRoutePathMatch", version: "2.0.0" };
class HttpRoutePrefixPathMatch extends HttpRoutePathMatch {
    constructor(prefix) {
        super();
        this.prefix = prefix;
        if (prefix && prefix[0] !== '/') {
            throw new Error(`Prefix Path for the match must start with \'/\', got: ${prefix}`);
        }
    }
    bind(_scope) {
        return {
            prefixPathMatch: this.prefix,
        };
    }
}
class HttpRouteWholePathMatch extends HttpRoutePathMatch {
    constructor(match) {
        super();
        this.match = match;
        if (match.exact && match.exact[0] !== '/') {
            throw new Error(`Exact Path for the match must start with \'/\', got: ${match.exact}`);
        }
    }
    bind(_scope) {
        return {
            wholePathMatch: this.match,
        };
    }
}
/**
 * Defines HTTP gateway route matching based on the URL path of the request.
 *
 * @stability stable
 */
class HttpGatewayRoutePathMatch {
    /**
     * The value of the path must match the specified prefix.
     *
     * @param prefix the value to use to match the beginning of the path part of the URL of the request.
     * @param rewriteTo Specify either disabling automatic rewrite or rewriting to specified prefix path.
     * @stability stable
     */
    static startsWith(prefix, rewriteTo) {
        return new HttpGatewayRoutePrefixPathMatch(prefix, rewriteTo);
    }
    /**
     * The value of the path must match the specified value exactly.
     *
     * The provided `path` must start with the '/' character.
     *
     * @param path the exact path to match on.
     * @param rewriteTo the value to substitute for the matched part of the path of the gateway request URL As a default, retains original request's URL path.
     * @stability stable
     */
    static exactly(path, rewriteTo) {
        return new HttpGatewayRouteWholePathMatch({ exact: path }, rewriteTo);
    }
    /**
     * The value of the path must match the specified regex.
     *
     * @param regex the regex used to match the path.
     * @param rewriteTo the value to substitute for the matched part of the path of the gateway request URL As a default, retains original request's URL path.
     * @stability stable
     */
    static regex(regex, rewriteTo) {
        return new HttpGatewayRouteWholePathMatch({ regex }, rewriteTo);
    }
}
exports.HttpGatewayRoutePathMatch = HttpGatewayRoutePathMatch;
_b = JSII_RTTI_SYMBOL_1;
HttpGatewayRoutePathMatch[_b] = { fqn: "aws-cdk-lib.aws_appmesh.HttpGatewayRoutePathMatch", version: "2.0.0" };
class HttpGatewayRoutePrefixPathMatch extends HttpGatewayRoutePathMatch {
    constructor(prefixPathMatch, rewriteTo) {
        super();
        this.prefixPathMatch = prefixPathMatch;
        this.rewriteTo = rewriteTo;
        if (prefixPathMatch[0] !== '/') {
            throw new Error('Prefix path for the match must start with \'/\', '
                + `got: ${prefixPathMatch}`);
        }
        if (rewriteTo) {
            if (prefixPathMatch[prefixPathMatch.length - 1] !== '/') {
                throw new Error('When prefix path for the rewrite is specified, prefix path for the match must end with \'/\', '
                    + `got: ${prefixPathMatch}`);
            }
            if (rewriteTo[0] !== '/' || rewriteTo[rewriteTo.length - 1] !== '/') {
                throw new Error('Prefix path for the rewrite must start and end with \'/\', '
                    + `got: ${rewriteTo}`);
            }
        }
    }
    bind(_scope) {
        return {
            prefixPathMatch: this.prefixPathMatch,
            prefixPathRewrite: this.rewriteTo === undefined
                ? undefined
                : {
                    defaultPrefix: this.rewriteTo === '' ? 'DISABLED' : undefined,
                    value: this.rewriteTo === '' ? undefined : this.rewriteTo,
                },
        };
    }
}
class HttpGatewayRouteWholePathMatch extends HttpGatewayRoutePathMatch {
    constructor(wholePathMatch, exactPathRewrite) {
        super();
        this.wholePathMatch = wholePathMatch;
        this.exactPathRewrite = exactPathRewrite;
        if (wholePathMatch.exact && wholePathMatch.exact[0] !== '/') {
            throw new Error(`Exact Path for the match must start with \'/\', got: ${wholePathMatch.exact}`);
        }
        if (exactPathRewrite === '') {
            throw new Error('Exact Path for the rewrite cannot be empty. Unlike startsWith() method, no automatic rewrite on whole path match');
        }
        if (exactPathRewrite && exactPathRewrite[0] !== '/') {
            throw new Error(`Exact Path for the rewrite must start with \'/\', got: ${exactPathRewrite}`);
        }
    }
    bind(_scope) {
        return {
            wholePathMatch: this.wholePathMatch,
            wholePathRewrite: this.exactPathRewrite === undefined ? undefined : { exact: this.exactPathRewrite },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,
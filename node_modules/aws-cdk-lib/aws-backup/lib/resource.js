"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupResource = exports.TagOperation = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("../../core");
/**
 * An operation that is applied to a key-value pair.
 *
 * @stability stable
 */
var TagOperation;
(function (TagOperation) {
    TagOperation["STRING_EQUALS"] = "STRINGEQUALS";
    TagOperation["DUMMY"] = "dummy";
})(TagOperation = exports.TagOperation || (exports.TagOperation = {}));
/**
 * A resource to backup.
 *
 * @stability stable
 */
class BackupResource {
    /**
     * @stability stable
     */
    constructor(resource, tagCondition, construct) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_TagCondition(tagCondition);
        this.resource = resource;
        this.tagCondition = tagCondition;
        this.construct = construct;
    }
    /**
     * Adds all supported resources in a construct.
     *
     * @param construct The construct containing resources to backup.
     * @stability stable
     */
    static fromConstruct(construct) {
        return new BackupResource(undefined, undefined, construct);
    }
    /**
     * A DynamoDB table.
     *
     * @stability stable
     */
    static fromDynamoDbTable(table) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_dynamodb_ITable(table);
        return BackupResource.fromArn(table.tableArn);
    }
    /**
     * An EC2 instance.
     *
     * @stability stable
     */
    static fromEc2Instance(instance) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_ec2_IInstance(instance);
        return BackupResource.fromArn(core_1.Stack.of(instance).formatArn({
            service: 'ec2',
            resource: 'instance',
            resourceName: instance.instanceId,
        }));
    }
    /**
     * An EFS file system.
     *
     * @stability stable
     */
    static fromEfsFileSystem(fileSystem) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_efs_IFileSystem(fileSystem);
        return BackupResource.fromArn(core_1.Stack.of(fileSystem).formatArn({
            service: 'elasticfilesystem',
            resource: 'file-system',
            resourceName: fileSystem.fileSystemId,
        }));
    }
    /**
     * A RDS database instance.
     *
     * @stability stable
     */
    static fromRdsDatabaseInstance(instance) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_rds_IDatabaseInstance(instance);
        return BackupResource.fromArn(instance.instanceArn);
    }
    /**
     * A list of ARNs or match patterns such as `arn:aws:ec2:us-east-1:123456789012:volume/*`.
     *
     * @stability stable
     */
    static fromArn(arn) {
        return new BackupResource(arn);
    }
    /**
     * A tag condition.
     *
     * @stability stable
     */
    static fromTag(key, value, operation) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_TagOperation(operation);
        return new BackupResource(undefined, {
            key,
            value,
            operation,
        });
    }
}
exports.BackupResource = BackupResource;
_a = JSII_RTTI_SYMBOL_1;
BackupResource[_a] = { fqn: "aws-cdk-lib.aws_backup.BackupResource", version: "2.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZXNvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFJQSxxQ0FBbUM7Ozs7OztBQUluQyxJQUFZLFlBTVg7QUFORCxXQUFZLFlBQVk7SUFFdEIsOENBQThCLENBQUE7SUFHOUIsK0JBQWUsQ0FBQTtBQUNqQixDQUFDLEVBTlcsWUFBWSxHQUFaLG9CQUFZLEtBQVosb0JBQVksUUFNdkI7Ozs7OztBQWVELE1BQWEsY0FBYzs7OztJQXlEekIsWUFBWSxRQUFpQixFQUFFLFlBQTJCLEVBQUUsU0FBcUI7O1FBQy9FLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0tBQzVCOzs7Ozs7O0lBM0RNLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBb0I7UUFDOUMsT0FBTyxJQUFJLGNBQWMsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQzVEOzs7Ozs7SUFHTSxNQUFNLENBQUMsaUJBQWlCLENBQUMsS0FBc0I7O1FBQ3BELE9BQU8sY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDL0M7Ozs7OztJQUdNLE1BQU0sQ0FBQyxlQUFlLENBQUMsUUFBdUI7O1FBQ25ELE9BQU8sY0FBYyxDQUFDLE9BQU8sQ0FBQyxZQUFLLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVMsQ0FBQztZQUN6RCxPQUFPLEVBQUUsS0FBSztZQUNkLFFBQVEsRUFBRSxVQUFVO1lBQ3BCLFlBQVksRUFBRSxRQUFRLENBQUMsVUFBVTtTQUNsQyxDQUFDLENBQUMsQ0FBQztLQUNMOzs7Ozs7SUFHTSxNQUFNLENBQUMsaUJBQWlCLENBQUMsVUFBMkI7O1FBQ3pELE9BQU8sY0FBYyxDQUFDLE9BQU8sQ0FBQyxZQUFLLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFNBQVMsQ0FBQztZQUMzRCxPQUFPLEVBQUUsbUJBQW1CO1lBQzVCLFFBQVEsRUFBRSxhQUFhO1lBQ3ZCLFlBQVksRUFBRSxVQUFVLENBQUMsWUFBWTtTQUN0QyxDQUFDLENBQUMsQ0FBQztLQUNMOzs7Ozs7SUFHTSxNQUFNLENBQUMsdUJBQXVCLENBQUMsUUFBK0I7O1FBQ25FLE9BQU8sY0FBYyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDckQ7Ozs7OztJQUdNLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBVztRQUMvQixPQUFPLElBQUksY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2hDOzs7Ozs7SUFHTSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQVcsRUFBRSxLQUFhLEVBQUUsU0FBd0I7O1FBQ3hFLE9BQU8sSUFBSSxjQUFjLENBQUMsU0FBUyxFQUFFO1lBQ25DLEdBQUc7WUFDSCxLQUFLO1lBQ0wsU0FBUztTQUNWLENBQUMsQ0FBQztLQUNKOztBQTlDSCx3Q0E4REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBkeW5hbW9kYiBmcm9tICcuLi8uLi9hd3MtZHluYW1vZGInO1xuaW1wb3J0ICogYXMgZWMyIGZyb20gJy4uLy4uL2F3cy1lYzInO1xuaW1wb3J0ICogYXMgZWZzIGZyb20gJy4uLy4uL2F3cy1lZnMnO1xuaW1wb3J0ICogYXMgcmRzIGZyb20gJy4uLy4uL2F3cy1yZHMnO1xuaW1wb3J0IHsgU3RhY2sgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGVudW0gVGFnT3BlcmF0aW9uIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIFNUUklOR19FUVVBTFMgPSAnU1RSSU5HRVFVQUxTJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgRFVNTVkgPSAnZHVtbXknXG59XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgaW50ZXJmYWNlIFRhZ0NvbmRpdGlvbiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IGtleTogc3RyaW5nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcmVhZG9ubHkgb3BlcmF0aW9uPzogVGFnT3BlcmF0aW9uO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IHZhbHVlOiBzdHJpbmc7XG59XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmV4cG9ydCBjbGFzcyBCYWNrdXBSZXNvdXJjZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHN0YXRpYyBmcm9tQ29uc3RydWN0KGNvbnN0cnVjdDogQ29uc3RydWN0KSB7XG4gICAgcmV0dXJuIG5ldyBCYWNrdXBSZXNvdXJjZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29uc3RydWN0KTtcbiAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHN0YXRpYyBmcm9tRHluYW1vRGJUYWJsZSh0YWJsZTogZHluYW1vZGIuSVRhYmxlKSB7XG4gICAgcmV0dXJuIEJhY2t1cFJlc291cmNlLmZyb21Bcm4odGFibGUudGFibGVBcm4pO1xuICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUVjMkluc3RhbmNlKGluc3RhbmNlOiBlYzIuSUluc3RhbmNlKSB7XG4gICAgcmV0dXJuIEJhY2t1cFJlc291cmNlLmZyb21Bcm4oU3RhY2sub2YoaW5zdGFuY2UpLmZvcm1hdEFybih7XG4gICAgICBzZXJ2aWNlOiAnZWMyJyxcbiAgICAgIHJlc291cmNlOiAnaW5zdGFuY2UnLFxuICAgICAgcmVzb3VyY2VOYW1lOiBpbnN0YW5jZS5pbnN0YW5jZUlkLFxuICAgIH0pKTtcbiAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgc3RhdGljIGZyb21FZnNGaWxlU3lzdGVtKGZpbGVTeXN0ZW06IGVmcy5JRmlsZVN5c3RlbSkge1xuICAgIHJldHVybiBCYWNrdXBSZXNvdXJjZS5mcm9tQXJuKFN0YWNrLm9mKGZpbGVTeXN0ZW0pLmZvcm1hdEFybih7XG4gICAgICBzZXJ2aWNlOiAnZWxhc3RpY2ZpbGVzeXN0ZW0nLFxuICAgICAgcmVzb3VyY2U6ICdmaWxlLXN5c3RlbScsXG4gICAgICByZXNvdXJjZU5hbWU6IGZpbGVTeXN0ZW0uZmlsZVN5c3RlbUlkLFxuICAgIH0pKTtcbiAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyBzdGF0aWMgZnJvbVJkc0RhdGFiYXNlSW5zdGFuY2UoaW5zdGFuY2U6IHJkcy5JRGF0YWJhc2VJbnN0YW5jZSkge1xuICAgIHJldHVybiBCYWNrdXBSZXNvdXJjZS5mcm9tQXJuKGluc3RhbmNlLmluc3RhbmNlQXJuKTtcbiAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHN0YXRpYyBmcm9tQXJuKGFybjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBCYWNrdXBSZXNvdXJjZShhcm4pO1xuICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyBzdGF0aWMgZnJvbVRhZyhrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZywgb3BlcmF0aW9uPzogVGFnT3BlcmF0aW9uKSB7XG4gICAgcmV0dXJuIG5ldyBCYWNrdXBSZXNvdXJjZSh1bmRlZmluZWQsIHtcbiAgICAgIGtleSxcbiAgICAgIHZhbHVlLFxuICAgICAgb3BlcmF0aW9uLFxuICAgIH0pO1xuICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgcmVhZG9ubHkgcmVzb3VyY2U/OiBzdHJpbmc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHJlYWRvbmx5IHRhZ0NvbmRpdGlvbj86IFRhZ0NvbmRpdGlvbjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgcmVhZG9ubHkgY29uc3RydWN0PzogQ29uc3RydWN0O1xuXG4gIGNvbnN0cnVjdG9yKHJlc291cmNlPzogc3RyaW5nLCB0YWdDb25kaXRpb24/OiBUYWdDb25kaXRpb24sIGNvbnN0cnVjdD86IENvbnN0cnVjdCkge1xuICAgIHRoaXMucmVzb3VyY2UgPSByZXNvdXJjZTtcbiAgICB0aGlzLnRhZ0NvbmRpdGlvbiA9IHRhZ0NvbmRpdGlvbjtcbiAgICB0aGlzLmNvbnN0cnVjdCA9IGNvbnN0cnVjdDtcbiAgfVxufVxuIl19
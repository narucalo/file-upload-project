"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupPlan = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("../../core");
const backup_generated_1 = require("./backup.generated");
const rule_1 = require("./rule");
const selection_1 = require("./selection");
const vault_1 = require("./vault");
/**
 * A backup plan.
 *
 * @stability stable
 */
class BackupPlan extends core_1.Resource {
    /**
     * @stability stable
     */
    constructor(scope, id, props = {}) {
        super(scope, id);
        this.rules = [];
        jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_BackupPlanProps(props);
        const plan = new backup_generated_1.CfnBackupPlan(this, 'Resource', {
            backupPlan: {
                backupPlanName: props.backupPlanName || id,
                backupPlanRule: core_1.Lazy.any({ produce: () => this.rules }, { omitEmptyArray: true }),
            },
        });
        this.backupPlanId = plan.attrBackupPlanId;
        this.backupPlanArn = plan.attrBackupPlanArn;
        this.versionId = plan.attrVersionId;
        this._backupVault = props.backupVault;
        for (const rule of props.backupPlanRules || []) {
            this.addRule(rule);
        }
        this.node.addValidation({ validate: () => this.validatePlan() });
    }
    /**
     * Import an existing backup plan.
     *
     * @stability stable
     */
    static fromBackupPlanId(scope, id, backupPlanId) {
        class Import extends core_1.Resource {
            constructor() {
                super(...arguments);
                this.backupPlanId = backupPlanId;
            }
        }
        return new Import(scope, id);
    }
    /**
     * Daily with 35 day retention.
     *
     * @stability stable
     */
    static daily35DayRetention(scope, id, backupVault) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_IBackupVault(backupVault);
        const plan = new BackupPlan(scope, id, { backupVault });
        plan.addRule(rule_1.BackupPlanRule.daily());
        return plan;
    }
    /**
     * Daily and monthly with 1 year retention.
     *
     * @stability stable
     */
    static dailyMonthly1YearRetention(scope, id, backupVault) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_IBackupVault(backupVault);
        const plan = new BackupPlan(scope, id, { backupVault });
        plan.addRule(rule_1.BackupPlanRule.daily());
        plan.addRule(rule_1.BackupPlanRule.monthly1Year());
        return plan;
    }
    /**
     * Daily, weekly and monthly with 5 year retention.
     *
     * @stability stable
     */
    static dailyWeeklyMonthly5YearRetention(scope, id, backupVault) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_IBackupVault(backupVault);
        const plan = new BackupPlan(scope, id, { backupVault });
        plan.addRule(rule_1.BackupPlanRule.daily());
        plan.addRule(rule_1.BackupPlanRule.weekly());
        plan.addRule(rule_1.BackupPlanRule.monthly5Year());
        return plan;
    }
    /**
     * Daily, weekly and monthly with 7 year retention.
     *
     * @stability stable
     */
    static dailyWeeklyMonthly7YearRetention(scope, id, backupVault) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_IBackupVault(backupVault);
        const plan = new BackupPlan(scope, id, { backupVault });
        plan.addRule(rule_1.BackupPlanRule.daily());
        plan.addRule(rule_1.BackupPlanRule.weekly());
        plan.addRule(rule_1.BackupPlanRule.monthly7Year());
        return plan;
    }
    /**
     * Adds a rule to a plan.
     *
     * @param rule the rule to add.
     * @stability stable
     */
    addRule(rule) {
        var _b, _c, _d, _e, _f, _g;
        jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_BackupPlanRule(rule);
        let vault;
        if (rule.props.backupVault) {
            vault = rule.props.backupVault;
        }
        else if (this._backupVault) {
            vault = this._backupVault;
        }
        else {
            this._backupVault = new vault_1.BackupVault(this, 'Vault');
            vault = this._backupVault;
        }
        this.rules.push({
            completionWindowMinutes: (_b = rule.props.completionWindow) === null || _b === void 0 ? void 0 : _b.toMinutes(),
            lifecycle: (rule.props.deleteAfter || rule.props.moveToColdStorageAfter) && {
                deleteAfterDays: (_c = rule.props.deleteAfter) === null || _c === void 0 ? void 0 : _c.toDays(),
                moveToColdStorageAfterDays: (_d = rule.props.moveToColdStorageAfter) === null || _d === void 0 ? void 0 : _d.toDays(),
            },
            ruleName: (_e = rule.props.ruleName) !== null && _e !== void 0 ? _e : `${this.node.id}Rule${this.rules.length}`,
            scheduleExpression: (_f = rule.props.scheduleExpression) === null || _f === void 0 ? void 0 : _f.expressionString,
            startWindowMinutes: (_g = rule.props.startWindow) === null || _g === void 0 ? void 0 : _g.toMinutes(),
            targetBackupVault: vault.backupVaultName,
        });
    }
    /**
     * The backup vault where backups are stored if not defined at the rule level.
     *
     * @stability stable
     */
    get backupVault() {
        if (!this._backupVault) {
            // This cannot happen but is here to make TypeScript happy
            throw new Error('No backup vault!');
        }
        return this._backupVault;
    }
    /**
     * Adds a selection to this plan.
     *
     * @stability stable
     */
    addSelection(id, options) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_BackupSelectionOptions(options);
        return new selection_1.BackupSelection(this, id, {
            backupPlan: this,
            ...options,
        });
    }
    validatePlan() {
        if (this.rules.length === 0) {
            return ['A backup plan must have at least 1 rule.'];
        }
        return [];
    }
}
exports.BackupPlan = BackupPlan;
_a = JSII_RTTI_SYMBOL_1;
BackupPlan[_a] = { fqn: "aws-cdk-lib.aws_backup.BackupPlan", version: "2.0.0" };
//# sourceMappingURL=data:application/json;base64,
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupPlanRule = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const events = require("../../aws-events");
const core_1 = require("../../core");
/**
 * A backup plan rule.
 *
 * @stability stable
 */
class BackupPlanRule {
    /**
     * @param props Rule properties.
     * @stability stable
     */
    constructor(props) {
        this.props = props;
        jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_BackupPlanRuleProps(props);
        if (props.deleteAfter && props.moveToColdStorageAfter &&
            props.deleteAfter.toSeconds() < props.moveToColdStorageAfter.toSeconds()) {
            throw new Error('`deleteAfter` must be greater than `moveToColdStorageAfter`');
        }
        if (props.scheduleExpression && !/^cron/.test(props.scheduleExpression.expressionString)) {
            throw new Error('`scheduleExpression` must be of type `cron`');
        }
    }
    /**
     * Daily with 35 days retention.
     *
     * @stability stable
     */
    static daily(backupVault) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_IBackupVault(backupVault);
        return new BackupPlanRule({
            backupVault,
            ruleName: 'Daily',
            scheduleExpression: events.Schedule.cron({
                hour: '5',
                minute: '0',
            }),
            deleteAfter: core_1.Duration.days(35),
        });
    }
    /**
     * Weekly with 3 months retention.
     *
     * @stability stable
     */
    static weekly(backupVault) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_IBackupVault(backupVault);
        return new BackupPlanRule({
            backupVault,
            ruleName: 'Weekly',
            scheduleExpression: events.Schedule.cron({
                hour: '5',
                minute: '0',
                weekDay: 'SAT',
            }),
            deleteAfter: core_1.Duration.days(30 * 3),
        });
    }
    /**
     * Monthly 1 year retention, move to cold storage after 1 month.
     *
     * @stability stable
     */
    static monthly1Year(backupVault) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_IBackupVault(backupVault);
        return new BackupPlanRule({
            backupVault,
            ruleName: 'Monthly1Year',
            scheduleExpression: events.Schedule.cron({
                day: '1',
                hour: '5',
                minute: '0',
            }),
            moveToColdStorageAfter: core_1.Duration.days(30),
            deleteAfter: core_1.Duration.days(365),
        });
    }
    /**
     * Monthly 5 year retention, move to cold storage after 3 months.
     *
     * @stability stable
     */
    static monthly5Year(backupVault) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_IBackupVault(backupVault);
        return new BackupPlanRule({
            backupVault,
            ruleName: 'Monthly5Year',
            scheduleExpression: events.Schedule.cron({
                day: '1',
                hour: '5',
                minute: '0',
            }),
            moveToColdStorageAfter: core_1.Duration.days(30 * 3),
            deleteAfter: core_1.Duration.days(365 * 5),
        });
    }
    /**
     * Monthly 7 year retention, move to cold storage after 3 months.
     *
     * @stability stable
     */
    static monthly7Year(backupVault) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_backup_IBackupVault(backupVault);
        return new BackupPlanRule({
            backupVault,
            ruleName: 'Monthly7Year',
            scheduleExpression: events.Schedule.cron({
                day: '1',
                hour: '5',
                minute: '0',
            }),
            moveToColdStorageAfter: core_1.Duration.days(30 * 3),
            deleteAfter: core_1.Duration.days(365 * 7),
        });
    }
}
exports.BackupPlanRule = BackupPlanRule;
_a = JSII_RTTI_SYMBOL_1;
BackupPlanRule[_a] = { fqn: "aws-cdk-lib.aws_backup.BackupPlanRule", version: "2.0.0" };
//# sourceMappingURL=data:application/json;base64,
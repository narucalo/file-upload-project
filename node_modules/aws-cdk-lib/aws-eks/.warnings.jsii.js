function _aws_cdk_aws_eks_NodeType(p) {
}
function _aws_cdk_aws_eks_CpuArch(p) {
}
function _aws_cdk_aws_eks_CoreDnsComputeType(p) {
}
function _aws_cdk_aws_eks_DefaultCapacityType(p) {
}
function _aws_cdk_aws_eks_MachineImageType(p) {
}
function _aws_cdk_aws_eks_PatchType(p) {
}
function _aws_cdk_aws_eks_NodegroupAmiType(p) {
}
function _aws_cdk_aws_eks_CapacityType(p) {
}
function _aws_cdk_aws_eks_TaintEffect(p) {
}
function _aws_cdk_aws_eks_AlbScheme(p) {
}
function _aws_cdk_aws_eks_OpenIdConnectProviderProps(p) {
}
function _aws_cdk_aws_eks_LaunchTemplateSpec(p) {
}
function _aws_cdk_aws_eks_AwsAuthMapping(p) {
}
function _aws_cdk_aws_eks_Selector(p) {
}
function _aws_cdk_aws_eks_ServiceAccountOptions(p) {
}
function _aws_cdk_aws_eks_BootstrapOptions(p) {
}
function _aws_cdk_aws_eks_IngressLoadBalancerAddressOptions(p) {
}
function _aws_cdk_aws_eks_INodegroup(p) {
}
function _aws_cdk_aws_eks_AwsAuthProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.cluster))
        _aws_cdk_aws_eks_Cluster(p.cluster);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_ServiceLoadBalancerAddressOptions(p) {
}
function _aws_cdk_aws_eks_AlbControllerOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.version))
        _aws_cdk_aws_eks_AlbControllerVersion(p.version);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_NodegroupRemoteAccess(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.sourceSecurityGroups))
        require("@aws-cdk/aws-ec2/.warnings.jsii.js")._aws_cdk_aws_ec2_ISecurityGroup(p.sourceSecurityGroups);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_HelmChartOptions(p) {
}
function _aws_cdk_aws_eks_CfnAddonProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.tags))
        require("@aws-cdk/core/.warnings.jsii.js")._aws_cdk_core_CfnTag(p.tags);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_FargateProfileProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.cluster))
        _aws_cdk_aws_eks_Cluster(p.cluster);
    if (!visitedObjects.has(p.selectors))
        _aws_cdk_aws_eks_Selector(p.selectors);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_HelmChartProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.cluster))
        _aws_cdk_aws_eks_ICluster(p.cluster);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_KubernetesManifestProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.cluster))
        _aws_cdk_aws_eks_ICluster(p.cluster);
    if (!visitedObjects.has(p.ingressAlbScheme))
        _aws_cdk_aws_eks_AlbScheme(p.ingressAlbScheme);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_ServiceAccountProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.cluster))
        _aws_cdk_aws_eks_ICluster(p.cluster);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_FargateClusterProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.defaultProfile))
        _aws_cdk_aws_eks_FargateProfileOptions(p.defaultProfile);
    if (!visitedObjects.has(p.albController))
        _aws_cdk_aws_eks_AlbControllerOptions(p.albController);
    if (!visitedObjects.has(p.coreDnsComputeType))
        _aws_cdk_aws_eks_CoreDnsComputeType(p.coreDnsComputeType);
    if (!visitedObjects.has(p.endpointAccess))
        _aws_cdk_aws_eks_EndpointAccess(p.endpointAccess);
    if (!visitedObjects.has(p.version))
        _aws_cdk_aws_eks_KubernetesVersion(p.version);
    if (!visitedObjects.has(p.vpcSubnets))
        require("@aws-cdk/aws-ec2/.warnings.jsii.js")._aws_cdk_aws_ec2_SubnetSelection(p.vpcSubnets);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_NodegroupProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.cluster))
        _aws_cdk_aws_eks_ICluster(p.cluster);
    if (!visitedObjects.has(p.amiType))
        _aws_cdk_aws_eks_NodegroupAmiType(p.amiType);
    if (!visitedObjects.has(p.capacityType))
        _aws_cdk_aws_eks_CapacityType(p.capacityType);
    if ("instanceType" in p)
        print("@aws-cdk/aws-eks.NodegroupOptions#instanceType", "Use `instanceTypes` instead.");
    if (!visitedObjects.has(p.instanceTypes))
        require("@aws-cdk/aws-ec2/.warnings.jsii.js")._aws_cdk_aws_ec2_InstanceType(p.instanceTypes);
    if (!visitedObjects.has(p.launchTemplateSpec))
        _aws_cdk_aws_eks_LaunchTemplateSpec(p.launchTemplateSpec);
    if (!visitedObjects.has(p.remoteAccess))
        _aws_cdk_aws_eks_NodegroupRemoteAccess(p.remoteAccess);
    if (!visitedObjects.has(p.taints))
        _aws_cdk_aws_eks_TaintSpec(p.taints);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_AlbControllerProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.cluster))
        _aws_cdk_aws_eks_Cluster(p.cluster);
    if (!visitedObjects.has(p.version))
        _aws_cdk_aws_eks_AlbControllerVersion(p.version);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_KubernetesObjectValueProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.cluster))
        _aws_cdk_aws_eks_ICluster(p.cluster);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_KubernetesManifestOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.ingressAlbScheme))
        _aws_cdk_aws_eks_AlbScheme(p.ingressAlbScheme);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_HelmChart(p) {
}
function _aws_cdk_aws_eks_KubernetesPatch(p) {
}
function _aws_cdk_aws_eks_KubernetesObjectValue(p) {
}
function _aws_cdk_aws_eks_KubernetesManifest(p) {
}
function _aws_cdk_aws_eks_OpenIdConnectProvider(p) {
}
function _aws_cdk_aws_eks_AutoScalingGroupOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.bootstrapOptions))
        _aws_cdk_aws_eks_BootstrapOptions(p.bootstrapOptions);
    if (!visitedObjects.has(p.machineImageType))
        _aws_cdk_aws_eks_MachineImageType(p.machineImageType);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_TaintSpec(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.effect))
        _aws_cdk_aws_eks_TaintEffect(p.effect);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_EksOptimizedImage(p) {
}
function _aws_cdk_aws_eks_FargateCluster(p) {
}
function _aws_cdk_aws_eks_EndpointAccess(p) {
}
function _aws_cdk_aws_eks_KubernetesPatchProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.cluster))
        _aws_cdk_aws_eks_ICluster(p.cluster);
    if (!visitedObjects.has(p.patchType))
        _aws_cdk_aws_eks_PatchType(p.patchType);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_CfnFargateProfileProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.tags))
        require("@aws-cdk/core/.warnings.jsii.js")._aws_cdk_core_CfnTag(p.tags);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_FargateProfileOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.selectors))
        _aws_cdk_aws_eks_Selector(p.selectors);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_ClusterProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.defaultCapacityType))
        _aws_cdk_aws_eks_DefaultCapacityType(p.defaultCapacityType);
    if (!visitedObjects.has(p.albController))
        _aws_cdk_aws_eks_AlbControllerOptions(p.albController);
    if (!visitedObjects.has(p.coreDnsComputeType))
        _aws_cdk_aws_eks_CoreDnsComputeType(p.coreDnsComputeType);
    if (!visitedObjects.has(p.endpointAccess))
        _aws_cdk_aws_eks_EndpointAccess(p.endpointAccess);
    if (!visitedObjects.has(p.version))
        _aws_cdk_aws_eks_KubernetesVersion(p.version);
    if (!visitedObjects.has(p.vpcSubnets))
        require("@aws-cdk/aws-ec2/.warnings.jsii.js")._aws_cdk_aws_ec2_SubnetSelection(p.vpcSubnets);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_AutoScalingGroupCapacityOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.bootstrapOptions))
        _aws_cdk_aws_eks_BootstrapOptions(p.bootstrapOptions);
    if (!visitedObjects.has(p.machineImageType))
        _aws_cdk_aws_eks_MachineImageType(p.machineImageType);
    if (!visitedObjects.has(p.blockDevices))
        require("@aws-cdk/aws-autoscaling/.warnings.jsii.js")._aws_cdk_aws_autoscaling_BlockDevice(p.blockDevices);
    if (!visitedObjects.has(p.groupMetrics))
        require("@aws-cdk/aws-autoscaling/.warnings.jsii.js")._aws_cdk_aws_autoscaling_GroupMetrics(p.groupMetrics);
    if (!visitedObjects.has(p.notifications))
        require("@aws-cdk/aws-autoscaling/.warnings.jsii.js")._aws_cdk_aws_autoscaling_NotificationConfiguration(p.notifications);
    if ("notificationsTopic" in p)
        print("@aws-cdk/aws-autoscaling.CommonAutoScalingGroupProps#notificationsTopic", "use `notifications`");
    if ("replacingUpdateMinSuccessfulInstancesPercent" in p)
        print("@aws-cdk/aws-autoscaling.CommonAutoScalingGroupProps#replacingUpdateMinSuccessfulInstancesPercent", "Use `signals` instead");
    if ("resourceSignalCount" in p)
        print("@aws-cdk/aws-autoscaling.CommonAutoScalingGroupProps#resourceSignalCount", "Use `signals` instead.");
    if ("resourceSignalTimeout" in p)
        print("@aws-cdk/aws-autoscaling.CommonAutoScalingGroupProps#resourceSignalTimeout", "Use `signals` instead.");
    if ("rollingUpdateConfiguration" in p)
        print("@aws-cdk/aws-autoscaling.CommonAutoScalingGroupProps#rollingUpdateConfiguration", "Use `updatePolicy` instead");
    if ("updateType" in p)
        print("@aws-cdk/aws-autoscaling.CommonAutoScalingGroupProps#updateType", "Use `updatePolicy` instead");
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_AlbController(p) {
}
function _aws_cdk_aws_eks_CommonClusterOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.version))
        _aws_cdk_aws_eks_KubernetesVersion(p.version);
    if (!visitedObjects.has(p.vpcSubnets))
        require("@aws-cdk/aws-ec2/.warnings.jsii.js")._aws_cdk_aws_ec2_SubnetSelection(p.vpcSubnets);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_EksOptimizedImageProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.cpuArch))
        _aws_cdk_aws_eks_CpuArch(p.cpuArch);
    if (!visitedObjects.has(p.nodeType))
        _aws_cdk_aws_eks_NodeType(p.nodeType);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_AwsAuth(p) {
}
function _aws_cdk_aws_eks_CfnAddon(p) {
}
function _aws_cdk_aws_eks_FargateProfile(p) {
}
function _aws_cdk_aws_eks_ClusterAttributes(p) {
}
function _aws_cdk_aws_eks_Nodegroup(p) {
}
function _aws_cdk_aws_eks_CfnFargateProfile(p) {
}
function _aws_cdk_aws_eks_CfnFargateProfile_LabelProperty(p) {
}
function _aws_cdk_aws_eks_KubernetesVersion(p) {
}
function _aws_cdk_aws_eks_CfnClusterProps(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.resourcesVpcConfig))
        _aws_cdk_aws_eks_CfnCluster_ResourcesVpcConfigProperty(p.resourcesVpcConfig);
    if (!visitedObjects.has(p.tags))
        require("@aws-cdk/core/.warnings.jsii.js")._aws_cdk_core_CfnTag(p.tags);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_ServiceAccount(p) {
}
function _aws_cdk_aws_eks_ClusterOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.albController))
        _aws_cdk_aws_eks_AlbControllerOptions(p.albController);
    if (!visitedObjects.has(p.coreDnsComputeType))
        _aws_cdk_aws_eks_CoreDnsComputeType(p.coreDnsComputeType);
    if (!visitedObjects.has(p.endpointAccess))
        _aws_cdk_aws_eks_EndpointAccess(p.endpointAccess);
    if (!visitedObjects.has(p.version))
        _aws_cdk_aws_eks_KubernetesVersion(p.version);
    if (!visitedObjects.has(p.vpcSubnets))
        require("@aws-cdk/aws-ec2/.warnings.jsii.js")._aws_cdk_aws_ec2_SubnetSelection(p.vpcSubnets);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_CfnFargateProfile_SelectorProperty(p) {
}
function _aws_cdk_aws_eks_CfnNodegroupProps(p) {
}
function _aws_cdk_aws_eks_AlbControllerVersion(p) {
}
function _aws_cdk_aws_eks_NodegroupOptions(p) {
    if (p == null)
        return;
    visitedObjects.add(p);
    if (!visitedObjects.has(p.amiType))
        _aws_cdk_aws_eks_NodegroupAmiType(p.amiType);
    if (!visitedObjects.has(p.capacityType))
        _aws_cdk_aws_eks_CapacityType(p.capacityType);
    if ("instanceType" in p)
        print("@aws-cdk/aws-eks.NodegroupOptions#instanceType", "Use `instanceTypes` instead.");
    if (!visitedObjects.has(p.instanceTypes))
        require("@aws-cdk/aws-ec2/.warnings.jsii.js")._aws_cdk_aws_ec2_InstanceType(p.instanceTypes);
    if (!visitedObjects.has(p.launchTemplateSpec))
        _aws_cdk_aws_eks_LaunchTemplateSpec(p.launchTemplateSpec);
    if (!visitedObjects.has(p.remoteAccess))
        _aws_cdk_aws_eks_NodegroupRemoteAccess(p.remoteAccess);
    if (!visitedObjects.has(p.taints))
        _aws_cdk_aws_eks_TaintSpec(p.taints);
    visitedObjects.delete(p);
}
function _aws_cdk_aws_eks_CfnCluster(p) {
}
function _aws_cdk_aws_eks_CfnCluster_KubernetesNetworkConfigProperty(p) {
}
function _aws_cdk_aws_eks_CfnCluster_LoggingTypeConfigProperty(p) {
}
function _aws_cdk_aws_eks_CfnCluster_EncryptionConfigProperty(p) {
}
function _aws_cdk_aws_eks_CfnCluster_LoggingProperty(p) {
}
function _aws_cdk_aws_eks_CfnCluster_ResourcesVpcConfigProperty(p) {
}
function _aws_cdk_aws_eks_CfnCluster_ClusterLoggingProperty(p) {
}
function _aws_cdk_aws_eks_CfnNodegroup(p) {
}
function _aws_cdk_aws_eks_CfnNodegroup_RemoteAccessProperty(p) {
}
function _aws_cdk_aws_eks_CfnNodegroup_UpdateConfigProperty(p) {
}
function _aws_cdk_aws_eks_CfnNodegroup_LaunchTemplateSpecificationProperty(p) {
}
function _aws_cdk_aws_eks_CfnNodegroup_ScalingConfigProperty(p) {
}
function _aws_cdk_aws_eks_CfnNodegroup_TaintProperty(p) {
}
function _aws_cdk_aws_eks_ICluster(p) {
}
function _aws_cdk_aws_eks_Cluster(p) {
}
function print(name, deprecationMessage) {
    const deprecated = process.env.JSII_DEPRECATED;
    const deprecationMode = ["warn", "fail", "quiet"].includes(deprecated) ? deprecated : "warn";
    const message = `${name} is deprecated.\n  ${deprecationMessage}\n  This API will be removed in the next major release.`;
    switch (deprecationMode) {
        case "fail":
            throw new DeprecationError(message);
        case "warn":
            console.warn("[WARNING]", message);
            break;
    }
}
const visitedObjects = new Set();
class DeprecationError extends Error {
}
module.exports = { print, _aws_cdk_aws_eks_NodeType, _aws_cdk_aws_eks_CpuArch, _aws_cdk_aws_eks_CoreDnsComputeType, _aws_cdk_aws_eks_DefaultCapacityType, _aws_cdk_aws_eks_MachineImageType, _aws_cdk_aws_eks_PatchType, _aws_cdk_aws_eks_NodegroupAmiType, _aws_cdk_aws_eks_CapacityType, _aws_cdk_aws_eks_TaintEffect, _aws_cdk_aws_eks_AlbScheme, _aws_cdk_aws_eks_OpenIdConnectProviderProps, _aws_cdk_aws_eks_LaunchTemplateSpec, _aws_cdk_aws_eks_AwsAuthMapping, _aws_cdk_aws_eks_Selector, _aws_cdk_aws_eks_ServiceAccountOptions, _aws_cdk_aws_eks_BootstrapOptions, _aws_cdk_aws_eks_IngressLoadBalancerAddressOptions, _aws_cdk_aws_eks_INodegroup, _aws_cdk_aws_eks_AwsAuthProps, _aws_cdk_aws_eks_ServiceLoadBalancerAddressOptions, _aws_cdk_aws_eks_AlbControllerOptions, _aws_cdk_aws_eks_NodegroupRemoteAccess, _aws_cdk_aws_eks_HelmChartOptions, _aws_cdk_aws_eks_CfnAddonProps, _aws_cdk_aws_eks_FargateProfileProps, _aws_cdk_aws_eks_HelmChartProps, _aws_cdk_aws_eks_KubernetesManifestProps, _aws_cdk_aws_eks_ServiceAccountProps, _aws_cdk_aws_eks_FargateClusterProps, _aws_cdk_aws_eks_NodegroupProps, _aws_cdk_aws_eks_AlbControllerProps, _aws_cdk_aws_eks_KubernetesObjectValueProps, _aws_cdk_aws_eks_KubernetesManifestOptions, _aws_cdk_aws_eks_HelmChart, _aws_cdk_aws_eks_KubernetesPatch, _aws_cdk_aws_eks_KubernetesObjectValue, _aws_cdk_aws_eks_KubernetesManifest, _aws_cdk_aws_eks_OpenIdConnectProvider, _aws_cdk_aws_eks_AutoScalingGroupOptions, _aws_cdk_aws_eks_TaintSpec, _aws_cdk_aws_eks_EksOptimizedImage, _aws_cdk_aws_eks_FargateCluster, _aws_cdk_aws_eks_EndpointAccess, _aws_cdk_aws_eks_KubernetesPatchProps, _aws_cdk_aws_eks_CfnFargateProfileProps, _aws_cdk_aws_eks_FargateProfileOptions, _aws_cdk_aws_eks_ClusterProps, _aws_cdk_aws_eks_AutoScalingGroupCapacityOptions, _aws_cdk_aws_eks_AlbController, _aws_cdk_aws_eks_CommonClusterOptions, _aws_cdk_aws_eks_EksOptimizedImageProps, _aws_cdk_aws_eks_AwsAuth, _aws_cdk_aws_eks_CfnAddon, _aws_cdk_aws_eks_FargateProfile, _aws_cdk_aws_eks_ClusterAttributes, _aws_cdk_aws_eks_Nodegroup, _aws_cdk_aws_eks_CfnFargateProfile, _aws_cdk_aws_eks_CfnFargateProfile_LabelProperty, _aws_cdk_aws_eks_KubernetesVersion, _aws_cdk_aws_eks_CfnClusterProps, _aws_cdk_aws_eks_ServiceAccount, _aws_cdk_aws_eks_ClusterOptions, _aws_cdk_aws_eks_CfnFargateProfile_SelectorProperty, _aws_cdk_aws_eks_CfnNodegroupProps, _aws_cdk_aws_eks_AlbControllerVersion, _aws_cdk_aws_eks_NodegroupOptions, _aws_cdk_aws_eks_CfnCluster, _aws_cdk_aws_eks_CfnCluster_KubernetesNetworkConfigProperty, _aws_cdk_aws_eks_CfnCluster_LoggingTypeConfigProperty, _aws_cdk_aws_eks_CfnCluster_EncryptionConfigProperty, _aws_cdk_aws_eks_CfnCluster_LoggingProperty, _aws_cdk_aws_eks_CfnCluster_ResourcesVpcConfigProperty, _aws_cdk_aws_eks_CfnCluster_ClusterLoggingProperty, _aws_cdk_aws_eks_CfnNodegroup, _aws_cdk_aws_eks_CfnNodegroup_RemoteAccessProperty, _aws_cdk_aws_eks_CfnNodegroup_UpdateConfigProperty, _aws_cdk_aws_eks_CfnNodegroup_LaunchTemplateSpecificationProperty, _aws_cdk_aws_eks_CfnNodegroup_ScalingConfigProperty, _aws_cdk_aws_eks_CfnNodegroup_TaintProperty, _aws_cdk_aws_eks_ICluster, _aws_cdk_aws_eks_Cluster };
module.exports.DeprecationError = DeprecationError;

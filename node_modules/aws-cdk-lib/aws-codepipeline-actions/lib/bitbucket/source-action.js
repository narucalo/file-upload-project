"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitBucketSourceAction = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const source_action_1 = require("../codestar-connections/source-action");
/**
 * (deprecated) A CodePipeline source action for BitBucket.
 *
 * @deprecated use CodeStarConnectionsSourceAction instead
 */
class BitBucketSourceAction {
    /**
     * @deprecated
     */
    constructor(props) {
        this.codeStarConnectionsSourceAction = new source_action_1.CodeStarConnectionsSourceAction(props);
    }
    /**
     * (deprecated) The simple properties of the Action, like its Owner, name, etc.
     *
     * Note that this accessor will be called before the {@link bind} callback.
     *
     * @deprecated
     */
    get actionProperties() {
        return this.codeStarConnectionsSourceAction.actionProperties;
    }
    /**
     * (deprecated) The callback invoked when this Action is added to a Pipeline.
     *
     * @deprecated
     */
    bind(scope, stage, options) {
        return this.codeStarConnectionsSourceAction.bind(scope, stage, options);
    }
    /**
     * (deprecated) Creates an Event that will be triggered whenever the state of this Action changes.
     *
     * @deprecated
     */
    onStateChange(name, target, options) {
        return this.codeStarConnectionsSourceAction.onStateChange(name, target, options);
    }
}
exports.BitBucketSourceAction = BitBucketSourceAction;
_a = JSII_RTTI_SYMBOL_1;
BitBucketSourceAction[_a] = { fqn: "aws-cdk-lib.aws_codepipeline_actions.BitBucketSourceAction", version: "2.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlLWFjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNvdXJjZS1hY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSx5RUFBOEg7Ozs7OztBQVc5SCxNQUFhLHFCQUFxQjs7OztJQUdoQyxZQUFZLEtBQWlDO1FBQzNDLElBQUksQ0FBQywrQkFBK0IsR0FBRyxJQUFJLCtDQUErQixDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ25GOzs7Ozs7OztJQUVELElBQVcsZ0JBQWdCO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLCtCQUErQixDQUFDLGdCQUFnQixDQUFDO0tBQzlEOzs7Ozs7SUFFTSxJQUFJLENBQUMsS0FBZ0IsRUFBRSxLQUEwQixFQUFFLE9BQXVDO1FBQy9GLE9BQU8sSUFBSSxDQUFDLCtCQUErQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ3pFOzs7Ozs7SUFFTSxhQUFhLENBQUMsSUFBWSxFQUFFLE1BQTJCLEVBQUUsT0FBMEI7UUFDeEYsT0FBTyxJQUFJLENBQUMsK0JBQStCLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDbEY7O0FBakJILHNEQWtCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvZGVwaXBlbGluZSBmcm9tICcuLi8uLi8uLi9hd3MtY29kZXBpcGVsaW5lJztcbmltcG9ydCAqIGFzIGV2ZW50cyBmcm9tICcuLi8uLi8uLi9hd3MtZXZlbnRzJztcbmltcG9ydCB7IENvZGVTdGFyQ29ubmVjdGlvbnNTb3VyY2VBY3Rpb24sIENvZGVTdGFyQ29ubmVjdGlvbnNTb3VyY2VBY3Rpb25Qcm9wcyB9IGZyb20gJy4uL2NvZGVzdGFyLWNvbm5lY3Rpb25zL3NvdXJjZS1hY3Rpb24nO1xuXG4vLyBrZWVwIHRoaXMgaW1wb3J0IHNlcGFyYXRlIGZyb20gb3RoZXIgaW1wb3J0cyB0byByZWR1Y2UgY2hhbmNlIGZvciBtZXJnZSBjb25mbGljdHMgd2l0aCB2Mi1tYWluXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZHVwbGljYXRlLWltcG9ydHMsIGltcG9ydC9vcmRlclxuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmV4cG9ydCBpbnRlcmZhY2UgQml0QnVja2V0U291cmNlQWN0aW9uUHJvcHMgZXh0ZW5kcyBDb2RlU3RhckNvbm5lY3Rpb25zU291cmNlQWN0aW9uUHJvcHMge1xufVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGNsYXNzIEJpdEJ1Y2tldFNvdXJjZUFjdGlvbiBpbXBsZW1lbnRzIGNvZGVwaXBlbGluZS5JQWN0aW9uIHtcbiAgcHJpdmF0ZSByZWFkb25seSBjb2RlU3RhckNvbm5lY3Rpb25zU291cmNlQWN0aW9uOiBDb2RlU3RhckNvbm5lY3Rpb25zU291cmNlQWN0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBCaXRCdWNrZXRTb3VyY2VBY3Rpb25Qcm9wcykge1xuICAgIHRoaXMuY29kZVN0YXJDb25uZWN0aW9uc1NvdXJjZUFjdGlvbiA9IG5ldyBDb2RlU3RhckNvbm5lY3Rpb25zU291cmNlQWN0aW9uKHByb3BzKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgYWN0aW9uUHJvcGVydGllcygpOiBjb2RlcGlwZWxpbmUuQWN0aW9uUHJvcGVydGllcyB7XG4gICAgcmV0dXJuIHRoaXMuY29kZVN0YXJDb25uZWN0aW9uc1NvdXJjZUFjdGlvbi5hY3Rpb25Qcm9wZXJ0aWVzO1xuICB9XG5cbiAgcHVibGljIGJpbmQoc2NvcGU6IENvbnN0cnVjdCwgc3RhZ2U6IGNvZGVwaXBlbGluZS5JU3RhZ2UsIG9wdGlvbnM6IGNvZGVwaXBlbGluZS5BY3Rpb25CaW5kT3B0aW9ucyk6IGNvZGVwaXBlbGluZS5BY3Rpb25Db25maWcge1xuICAgIHJldHVybiB0aGlzLmNvZGVTdGFyQ29ubmVjdGlvbnNTb3VyY2VBY3Rpb24uYmluZChzY29wZSwgc3RhZ2UsIG9wdGlvbnMpO1xuICB9XG5cbiAgcHVibGljIG9uU3RhdGVDaGFuZ2UobmFtZTogc3RyaW5nLCB0YXJnZXQ/OiBldmVudHMuSVJ1bGVUYXJnZXQsIG9wdGlvbnM/OiBldmVudHMuUnVsZVByb3BzKTogZXZlbnRzLlJ1bGUge1xuICAgIHJldHVybiB0aGlzLmNvZGVTdGFyQ29ubmVjdGlvbnNTb3VyY2VBY3Rpb24ub25TdGF0ZUNoYW5nZShuYW1lLCB0YXJnZXQsIG9wdGlvbnMpO1xuICB9XG59XG4iXX0=
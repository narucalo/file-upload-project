"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultTokenResolver = exports.StringConcat = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const encoding_1 = require("./private/encoding");
const token_map_1 = require("./private/token-map");
/**
 * Converts all fragments to strings and concats those.
 *
 * Drops 'undefined's.
 *
 * @stability stable
 */
class StringConcat {
    /**
     * Join the fragment on the left and on the right.
     *
     * @stability stable
     */
    join(left, right) {
        if (left === undefined) {
            return right !== undefined ? `${right}` : undefined;
        }
        if (right === undefined) {
            return `${left}`;
        }
        return `${left}${right}`;
    }
}
exports.StringConcat = StringConcat;
_a = JSII_RTTI_SYMBOL_1;
StringConcat[_a] = { fqn: "aws-cdk-lib.StringConcat", version: "2.0.0" };
/**
 * Default resolver implementation.
 *
 * @stability stable
 */
class DefaultTokenResolver {
    /**
     * @stability stable
     */
    constructor(concat) {
        this.concat = concat;
        jsiiDeprecationWarnings.aws_cdk_lib_IFragmentConcatenator(concat);
    }
    /**
     * Default Token resolution.
     *
     * Resolve the Token, recurse into whatever it returns,
     * then finally post-process it.
     *
     * @stability stable
     */
    resolveToken(t, context, postProcessor) {
        jsiiDeprecationWarnings.aws_cdk_lib_IResolvable(t);
        jsiiDeprecationWarnings.aws_cdk_lib_IResolveContext(context);
        jsiiDeprecationWarnings.aws_cdk_lib_IPostProcessor(postProcessor);
        try {
            let resolved = t.resolve(context);
            // The token might have returned more values that need resolving, recurse
            resolved = context.resolve(resolved);
            resolved = postProcessor.postProcess(resolved, context);
            return resolved;
        }
        catch (e) {
            let message = `Resolution error: ${e.message}.`;
            if (t.creationStack && t.creationStack.length > 0) {
                message += `\nObject creation stack:\n  at ${t.creationStack.join('\n  at ')}`;
            }
            e.message = message;
            throw e;
        }
    }
    /**
     * Resolve string fragments to Tokens.
     *
     * @stability stable
     */
    resolveString(fragments, context) {
        jsiiDeprecationWarnings.aws_cdk_lib_TokenizedStringFragments(fragments);
        jsiiDeprecationWarnings.aws_cdk_lib_IResolveContext(context);
        return fragments.mapTokens({ mapToken: context.resolve }).join(this.concat);
    }
    /**
     * Resolve a tokenized list.
     *
     * @stability stable
     */
    resolveList(xs, context) {
        jsiiDeprecationWarnings.aws_cdk_lib_IResolveContext(context);
        // Must be a singleton list token, because concatenation is not allowed.
        if (xs.length !== 1) {
            throw new Error(`Cannot add elements to list token, got: ${xs}`);
        }
        const str = encoding_1.TokenString.forListToken(xs[0]);
        const tokenMap = token_map_1.TokenMap.instance();
        const fragments = str.split(tokenMap.lookupToken.bind(tokenMap));
        if (fragments.length !== 1) {
            throw new Error(`Cannot concatenate strings in a tokenized string array, got: ${xs[0]}`);
        }
        return fragments.mapTokens({ mapToken: context.resolve }).firstValue;
    }
}
exports.DefaultTokenResolver = DefaultTokenResolver;
_b = JSII_RTTI_SYMBOL_1;
DefaultTokenResolver[_b] = { fqn: "aws-cdk-lib.DefaultTokenResolver", version: "2.0.0" };
//# sourceMappingURL=data:application/json;base64,
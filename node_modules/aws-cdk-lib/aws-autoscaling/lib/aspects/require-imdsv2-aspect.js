"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoScalingGroupRequireImdsv2Aspect = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk = require("../../../core");
const auto_scaling_group_1 = require("../auto-scaling-group");
/**
 * Aspect that makes IMDSv2 required on instances deployed by AutoScalingGroups.
 *
 * @stability stable
 */
class AutoScalingGroupRequireImdsv2Aspect {
    /**
     * @stability stable
     */
    constructor() {
    }
    /**
     * All aspects can visit an IConstruct.
     *
     * @stability stable
     */
    visit(node) {
        if (!(node instanceof auto_scaling_group_1.AutoScalingGroup)) {
            return;
        }
        const launchConfig = node.node.tryFindChild('LaunchConfig');
        if (cdk.isResolvableObject(launchConfig.metadataOptions)) {
            this.warn(node, 'CfnLaunchConfiguration.MetadataOptions field is a CDK token.');
            return;
        }
        launchConfig.metadataOptions = {
            ...launchConfig.metadataOptions,
            httpTokens: 'required',
        };
    }
    /**
     * Adds a warning annotation to a node.
     *
     * @param node The scope to add the warning to.
     * @param message The warning message.
     * @stability stable
     */
    warn(node, message) {
        cdk.Annotations.of(node).addWarning(`${AutoScalingGroupRequireImdsv2Aspect.name} failed on node ${node.node.id}: ${message}`);
    }
}
exports.AutoScalingGroupRequireImdsv2Aspect = AutoScalingGroupRequireImdsv2Aspect;
_a = JSII_RTTI_SYMBOL_1;
AutoScalingGroupRequireImdsv2Aspect[_a] = { fqn: "aws-cdk-lib.aws_autoscaling.AutoScalingGroupRequireImdsv2Aspect", version: "2.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWlyZS1pbWRzdjItYXNwZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVxdWlyZS1pbWRzdjItYXNwZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEscUNBQXFDO0FBRXJDLDhEQUF5RDs7Ozs7O0FBSXpELE1BQWEsbUNBQW1DOzs7O0lBQzlDO0tBQ0M7Ozs7OztJQUVNLEtBQUssQ0FBQyxJQUFnQjtRQUMzQixJQUFJLENBQUMsQ0FBQyxJQUFJLFlBQVkscUNBQWdCLENBQUMsRUFBRTtZQUN2QyxPQUFPO1NBQ1I7UUFFRCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQTJCLENBQUM7UUFDdEYsSUFBSSxHQUFHLENBQUMsa0JBQWtCLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxFQUFFO1lBQ3hELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLDhEQUE4RCxDQUFDLENBQUM7WUFDaEYsT0FBTztTQUNSO1FBRUQsWUFBWSxDQUFDLGVBQWUsR0FBRztZQUM3QixHQUFHLFlBQVksQ0FBQyxlQUFlO1lBQy9CLFVBQVUsRUFBRSxVQUFVO1NBQ3ZCLENBQUM7S0FDSDs7Ozs7Ozs7SUFHUyxJQUFJLENBQUMsSUFBZ0IsRUFBRSxPQUFlO1FBQzlDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLG1DQUFtQyxDQUFDLElBQUksbUJBQW1CLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLE9BQU8sRUFBRSxDQUFDLENBQUM7S0FDL0g7O0FBeEJILGtGQXlCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICcuLi8uLi8uLi9jb3JlJztcbmltcG9ydCB7IElDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IEF1dG9TY2FsaW5nR3JvdXAgfSBmcm9tICcuLi9hdXRvLXNjYWxpbmctZ3JvdXAnO1xuaW1wb3J0IHsgQ2ZuTGF1bmNoQ29uZmlndXJhdGlvbiB9IGZyb20gJy4uL2F1dG9zY2FsaW5nLmdlbmVyYXRlZCc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmV4cG9ydCBjbGFzcyBBdXRvU2NhbGluZ0dyb3VwUmVxdWlyZUltZHN2MkFzcGVjdCBpbXBsZW1lbnRzIGNkay5JQXNwZWN0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICBwdWJsaWMgdmlzaXQobm9kZTogSUNvbnN0cnVjdCk6IHZvaWQge1xuICAgIGlmICghKG5vZGUgaW5zdGFuY2VvZiBBdXRvU2NhbGluZ0dyb3VwKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGxhdW5jaENvbmZpZyA9IG5vZGUubm9kZS50cnlGaW5kQ2hpbGQoJ0xhdW5jaENvbmZpZycpIGFzIENmbkxhdW5jaENvbmZpZ3VyYXRpb247XG4gICAgaWYgKGNkay5pc1Jlc29sdmFibGVPYmplY3QobGF1bmNoQ29uZmlnLm1ldGFkYXRhT3B0aW9ucykpIHtcbiAgICAgIHRoaXMud2Fybihub2RlLCAnQ2ZuTGF1bmNoQ29uZmlndXJhdGlvbi5NZXRhZGF0YU9wdGlvbnMgZmllbGQgaXMgYSBDREsgdG9rZW4uJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGF1bmNoQ29uZmlnLm1ldGFkYXRhT3B0aW9ucyA9IHtcbiAgICAgIC4uLmxhdW5jaENvbmZpZy5tZXRhZGF0YU9wdGlvbnMsXG4gICAgICBodHRwVG9rZW5zOiAncmVxdWlyZWQnLFxuICAgIH07XG4gIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHJvdGVjdGVkIHdhcm4obm9kZTogSUNvbnN0cnVjdCwgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgY2RrLkFubm90YXRpb25zLm9mKG5vZGUpLmFkZFdhcm5pbmcoYCR7QXV0b1NjYWxpbmdHcm91cFJlcXVpcmVJbWRzdjJBc3BlY3QubmFtZX0gZmFpbGVkIG9uIG5vZGUgJHtub2RlLm5vZGUuaWR9OiAke21lc3NhZ2V9YCk7XG4gIH1cbn1cbiJdfQ==
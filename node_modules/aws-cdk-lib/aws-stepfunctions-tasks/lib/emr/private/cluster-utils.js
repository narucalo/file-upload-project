"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstanceGroupModifyConfigPropertyToJson = exports.BootstrapActionConfigToJson = exports.PlacementTypePropertyToJson = exports.InstanceGroupConfigPropertyToJson = exports.AutoScalingPolicyPropertyToJson = exports.ScalingRulePropertyToJson = exports.ScalingActionPropertyToJson = exports.ScalingTriggerPropertyToJson = exports.MetricDimensionPropertyToJson = exports.InstanceFleetConfigPropertyToJson = exports.InstanceFleetProvisioningSpecificationsPropertyToJson = exports.InstanceTypeConfigPropertyToJson = exports.EbsConfigurationPropertyToJson = exports.EbsBlockDeviceConfigPropertyToJson = exports.ConfigurationPropertyToJson = exports.ApplicationConfigPropertyToJson = exports.InstancesConfigPropertyToJson = exports.KerberosAttributesPropertyToJson = void 0;
const cdk = require("../../../../core");
/**
 * Render the KerberosAttributesProperty as JSON
 *
 * @param property
 */
function KerberosAttributesPropertyToJson(property) {
    return {
        ADDomainJoinPassword: cdk.stringToCloudFormation(property.adDomainJoinPassword),
        ADDomainJoinUser: cdk.stringToCloudFormation(property.adDomainJoinUser),
        CrossRealmTrustPrincipalPassword: cdk.stringToCloudFormation(property.crossRealmTrustPrincipalPassword),
        KdcAdminPassword: cdk.stringToCloudFormation(property.kdcAdminPassword),
        Realm: cdk.stringToCloudFormation(property.realm),
    };
}
exports.KerberosAttributesPropertyToJson = KerberosAttributesPropertyToJson;
/**
 * Render the InstancesConfigProperty to JSON
 *
 * @param property
 */
function InstancesConfigPropertyToJson(property) {
    return {
        AdditionalMasterSecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(property.additionalMasterSecurityGroups),
        AdditionalSlaveSecurityGroups: cdk.listMapper(cdk.stringToCloudFormation)(property.additionalSlaveSecurityGroups),
        Ec2KeyName: cdk.stringToCloudFormation(property.ec2KeyName),
        Ec2SubnetId: cdk.stringToCloudFormation(property.ec2SubnetId),
        Ec2SubnetIds: cdk.listMapper(cdk.stringToCloudFormation)(property.ec2SubnetIds),
        EmrManagedMasterSecurityGroup: cdk.stringToCloudFormation(property.emrManagedMasterSecurityGroup),
        EmrManagedSlaveSecurityGroup: cdk.stringToCloudFormation(property.emrManagedSlaveSecurityGroup),
        HadoopVersion: cdk.stringToCloudFormation(property.hadoopVersion),
        InstanceCount: cdk.numberToCloudFormation(property.instanceCount),
        InstanceFleets: cdk.listMapper(InstanceFleetConfigPropertyToJson)(property.instanceFleets),
        InstanceGroups: cdk.listMapper(InstanceGroupConfigPropertyToJson)(property.instanceGroups),
        KeepJobFlowAliveWhenNoSteps: true,
        MasterInstanceType: cdk.stringToCloudFormation(property.masterInstanceType),
        Placement: property.placement === undefined ? property.placement : PlacementTypePropertyToJson(property.placement),
        ServiceAccessSecurityGroup: cdk.stringToCloudFormation(property.serviceAccessSecurityGroup),
        SlaveInstanceType: cdk.stringToCloudFormation(property.slaveInstanceType),
        TerminationProtected: cdk.booleanToCloudFormation(property.terminationProtected),
    };
}
exports.InstancesConfigPropertyToJson = InstancesConfigPropertyToJson;
/**
 * Render the ApplicationConfigProperty as JSON
 *
 * @param property
 */
function ApplicationConfigPropertyToJson(property) {
    return {
        Name: cdk.stringToCloudFormation(property.name),
        Args: cdk.listMapper(cdk.stringToCloudFormation)(property.args),
        Version: cdk.stringToCloudFormation(property.version),
        AdditionalInfo: cdk.objectToCloudFormation(property.additionalInfo),
    };
}
exports.ApplicationConfigPropertyToJson = ApplicationConfigPropertyToJson;
/**
 * Render the ConfigurationProperty as JSON
 *
 * @param property
 */
function ConfigurationPropertyToJson(property) {
    return {
        Classification: cdk.stringToCloudFormation(property.classification),
        Properties: cdk.objectToCloudFormation(property.properties),
        Configurations: cdk.listMapper(ConfigurationPropertyToJson)(property.configurations),
    };
}
exports.ConfigurationPropertyToJson = ConfigurationPropertyToJson;
/**
 * Render the EbsBlockDeviceConfigProperty as JSON
 *
 * @param property
 */
function EbsBlockDeviceConfigPropertyToJson(property) {
    var _a, _b;
    return {
        VolumeSpecification: {
            Iops: cdk.numberToCloudFormation(property.volumeSpecification.iops),
            SizeInGB: (_a = property.volumeSpecification.volumeSize) === null || _a === void 0 ? void 0 : _a.toGibibytes(),
            VolumeType: cdk.stringToCloudFormation((_b = property.volumeSpecification.volumeType) === null || _b === void 0 ? void 0 : _b.valueOf()),
        },
        VolumesPerInstance: cdk.numberToCloudFormation(property.volumesPerInstance),
    };
}
exports.EbsBlockDeviceConfigPropertyToJson = EbsBlockDeviceConfigPropertyToJson;
/**
 * Render the EbsConfigurationProperty to JSON
 *
 * @param property
 */
function EbsConfigurationPropertyToJson(property) {
    return {
        EbsBlockDeviceConfigs: cdk.listMapper(EbsBlockDeviceConfigPropertyToJson)(property.ebsBlockDeviceConfigs),
        EbsOptimized: cdk.booleanToCloudFormation(property.ebsOptimized),
    };
}
exports.EbsConfigurationPropertyToJson = EbsConfigurationPropertyToJson;
/**
 * Render the InstanceTypeConfigProperty to JSON]
 *
 * @param property
 */
function InstanceTypeConfigPropertyToJson(property) {
    var _a;
    return {
        BidPrice: cdk.stringToCloudFormation(property.bidPrice),
        BidPriceAsPercentageOfOnDemandPrice: cdk.numberToCloudFormation(property.bidPriceAsPercentageOfOnDemandPrice),
        Configurations: cdk.listMapper(ConfigurationPropertyToJson)(property.configurations),
        EbsConfiguration: property.ebsConfiguration === undefined ? property.ebsConfiguration : EbsConfigurationPropertyToJson(property.ebsConfiguration),
        InstanceType: cdk.stringToCloudFormation((_a = property.instanceType) === null || _a === void 0 ? void 0 : _a.valueOf()),
        WeightedCapacity: cdk.numberToCloudFormation(property.weightedCapacity),
    };
}
exports.InstanceTypeConfigPropertyToJson = InstanceTypeConfigPropertyToJson;
/**
 * Render the InstanceFleetProvisioningSpecificationsProperty to JSON
 *
 * @param property
 */
function InstanceFleetProvisioningSpecificationsPropertyToJson(property) {
    var _a;
    return {
        SpotSpecification: {
            AllocationStrategy: cdk.stringToCloudFormation(property.spotSpecification.allocationStrategy),
            BlockDurationMinutes: cdk.numberToCloudFormation(property.spotSpecification.blockDurationMinutes),
            TimeoutAction: cdk.stringToCloudFormation((_a = property.spotSpecification.timeoutAction) === null || _a === void 0 ? void 0 : _a.valueOf()),
            TimeoutDurationMinutes: cdk.numberToCloudFormation(property.spotSpecification.timeoutDurationMinutes),
        },
    };
}
exports.InstanceFleetProvisioningSpecificationsPropertyToJson = InstanceFleetProvisioningSpecificationsPropertyToJson;
/**
 * Render the InstanceFleetConfigProperty as JSON
 *
 * @param property
 */
function InstanceFleetConfigPropertyToJson(property) {
    var _a;
    return {
        InstanceFleetType: cdk.stringToCloudFormation((_a = property.instanceFleetType) === null || _a === void 0 ? void 0 : _a.valueOf()),
        InstanceTypeConfigs: cdk.listMapper(InstanceTypeConfigPropertyToJson)(property.instanceTypeConfigs),
        LaunchSpecifications: property.launchSpecifications === undefined
            ? property.launchSpecifications
            : InstanceFleetProvisioningSpecificationsPropertyToJson(property.launchSpecifications),
        Name: cdk.stringToCloudFormation(property.name),
        TargetOnDemandCapacity: cdk.numberToCloudFormation(property.targetOnDemandCapacity),
        TargetSpotCapacity: cdk.numberToCloudFormation(property.targetSpotCapacity),
    };
}
exports.InstanceFleetConfigPropertyToJson = InstanceFleetConfigPropertyToJson;
/**
 * Render the MetricDimensionProperty as JSON
 *
 * @param property
 */
function MetricDimensionPropertyToJson(property) {
    return {
        Key: cdk.stringToCloudFormation(property.key),
        Value: cdk.stringToCloudFormation(property.value),
    };
}
exports.MetricDimensionPropertyToJson = MetricDimensionPropertyToJson;
/**
 * Render the ScalingTriggerProperty to JSON
 *
 * @param property
 */
function ScalingTriggerPropertyToJson(property) {
    var _a, _b, _c;
    return {
        CloudWatchAlarmDefinition: {
            ComparisonOperator: cdk.stringToCloudFormation((_a = property.cloudWatchAlarmDefinition.comparisonOperator) === null || _a === void 0 ? void 0 : _a.valueOf()),
            Dimensions: cdk.listMapper(MetricDimensionPropertyToJson)(property.cloudWatchAlarmDefinition.dimensions),
            EvaluationPeriods: cdk.numberToCloudFormation(property.cloudWatchAlarmDefinition.evaluationPeriods),
            MetricName: cdk.stringToCloudFormation(property.cloudWatchAlarmDefinition.metricName),
            Namespace: cdk.stringToCloudFormation(property.cloudWatchAlarmDefinition.namespace),
            Period: cdk.numberToCloudFormation(property.cloudWatchAlarmDefinition.period.toSeconds()),
            Statistic: cdk.stringToCloudFormation((_b = property.cloudWatchAlarmDefinition.statistic) === null || _b === void 0 ? void 0 : _b.valueOf()),
            Threshold: cdk.numberToCloudFormation(property.cloudWatchAlarmDefinition.threshold),
            Unit: cdk.stringToCloudFormation((_c = property.cloudWatchAlarmDefinition.unit) === null || _c === void 0 ? void 0 : _c.valueOf()),
        },
    };
}
exports.ScalingTriggerPropertyToJson = ScalingTriggerPropertyToJson;
/**
 * Render the ScalingActionProperty to JSON
 *
 * @param property
 */
function ScalingActionPropertyToJson(property) {
    var _a;
    return {
        Market: cdk.stringToCloudFormation((_a = property.market) === null || _a === void 0 ? void 0 : _a.valueOf()),
        SimpleScalingPolicyConfiguration: {
            AdjustmentType: cdk.stringToCloudFormation(property.simpleScalingPolicyConfiguration.adjustmentType),
            CoolDown: cdk.numberToCloudFormation(property.simpleScalingPolicyConfiguration.coolDown),
            ScalingAdjustment: cdk.numberToCloudFormation(property.simpleScalingPolicyConfiguration.scalingAdjustment),
        },
    };
}
exports.ScalingActionPropertyToJson = ScalingActionPropertyToJson;
/**
 * Render the ScalingRuleProperty to JSON
 *
 * @param property
 */
function ScalingRulePropertyToJson(property) {
    return {
        Action: ScalingActionPropertyToJson(property.action),
        Description: cdk.stringToCloudFormation(property.description),
        Name: cdk.stringToCloudFormation(property.name),
        Trigger: ScalingTriggerPropertyToJson(property.trigger),
    };
}
exports.ScalingRulePropertyToJson = ScalingRulePropertyToJson;
/**
 * Render the AutoScalingPolicyProperty to JSON
 *
 * @param property
 */
function AutoScalingPolicyPropertyToJson(property) {
    return {
        Constraints: {
            MaxCapacity: cdk.numberToCloudFormation(property.constraints.maxCapacity),
            MinCapacity: cdk.numberToCloudFormation(property.constraints.minCapacity),
        },
        Rules: cdk.listMapper(ScalingRulePropertyToJson)(property.rules),
    };
}
exports.AutoScalingPolicyPropertyToJson = AutoScalingPolicyPropertyToJson;
/**
 * Render the InstanceGroupConfigProperty to JSON
 *
 * @param property
 */
function InstanceGroupConfigPropertyToJson(property) {
    var _a, _b;
    return {
        AutoScalingPolicy: property.autoScalingPolicy === undefined ? property.autoScalingPolicy : AutoScalingPolicyPropertyToJson(property.autoScalingPolicy),
        BidPrice: cdk.numberToCloudFormation(property.bidPrice),
        Configurations: cdk.listMapper(ConfigurationPropertyToJson)(property.configurations),
        EbsConfiguration: property.ebsConfiguration === undefined ? property.ebsConfiguration : EbsConfigurationPropertyToJson(property.ebsConfiguration),
        InstanceCount: cdk.numberToCloudFormation(property.instanceCount),
        InstanceRole: cdk.stringToCloudFormation((_a = property.instanceRole) === null || _a === void 0 ? void 0 : _a.valueOf()),
        InstanceType: cdk.stringToCloudFormation(property.instanceType),
        Market: cdk.stringToCloudFormation((_b = property.market) === null || _b === void 0 ? void 0 : _b.valueOf()),
        Name: cdk.stringToCloudFormation(property.name),
    };
}
exports.InstanceGroupConfigPropertyToJson = InstanceGroupConfigPropertyToJson;
/**
 * Render the PlacementTypeProperty to JSON
 *
 * @param property
 */
function PlacementTypePropertyToJson(property) {
    return {
        AvailabilityZone: cdk.stringToCloudFormation(property.availabilityZone),
        AvailabilityZones: cdk.listMapper(cdk.stringToCloudFormation)(property.availabilityZones),
    };
}
exports.PlacementTypePropertyToJson = PlacementTypePropertyToJson;
/**
 * Render the BootstrapActionProperty as JSON
 *
 * @param property
 */
function BootstrapActionConfigToJson(property) {
    return {
        Name: cdk.stringToCloudFormation(property.name),
        ScriptBootstrapAction: {
            Path: cdk.stringToCloudFormation(property.scriptBootstrapAction.path),
            Args: cdk.listMapper(cdk.stringToCloudFormation)(property.scriptBootstrapAction.args),
        },
    };
}
exports.BootstrapActionConfigToJson = BootstrapActionConfigToJson;
/**
 * Render the InstanceGroupModifyConfigProperty to JSON
 *
 * @param property
 */
function InstanceGroupModifyConfigPropertyToJson(property) {
    return {
        Configurations: cdk.listMapper(ConfigurationPropertyToJson)(property.configurations),
        EC2InstanceIdsToTerminate: cdk.listMapper(cdk.stringToCloudFormation)(property.eC2InstanceIdsToTerminate),
        InstanceCount: cdk.numberToCloudFormation(property.instanceCount),
        ShrinkPolicy: property.shrinkPolicy === undefined ? property.shrinkPolicy : ShrinkPolicyPropertyToJson(property.shrinkPolicy),
    };
}
exports.InstanceGroupModifyConfigPropertyToJson = InstanceGroupModifyConfigPropertyToJson;
/**
 * Render the ShrinkPolicyProperty to JSON
 *
 * @param property
 */
function ShrinkPolicyPropertyToJson(property) {
    var _a;
    return {
        DecommissionTimeout: cdk.numberToCloudFormation((_a = property.decommissionTimeout) === null || _a === void 0 ? void 0 : _a.toSeconds()),
        InstanceResizePolicy: property.instanceResizePolicy ? InstanceResizePolicyPropertyToJson(property.instanceResizePolicy) : undefined,
    };
}
/**
 * Render the InstanceResizePolicyProperty to JSON
 *
 * @param property
 */
function InstanceResizePolicyPropertyToJson(property) {
    var _a;
    return {
        InstancesToProtect: cdk.listMapper(cdk.stringToCloudFormation)(property.instancesToProtect),
        InstancesToTerminate: cdk.listMapper(cdk.stringToCloudFormation)(property.instancesToTerminate),
        InstanceTerminationTimeout: cdk.numberToCloudFormation((_a = property.instanceTerminationTimeout) === null || _a === void 0 ? void 0 : _a.toSeconds()),
    };
}
//# sourceMappingURL=data:application/json;base64,
"use strict";
// Copyright 2012-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElastiCacheMetrics = void 0;
/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control
class ElastiCacheMetrics {
    static cpuUtilizationAverage(dimensions) {
        return {
            namespace: 'AWS/ElastiCache',
            metricName: 'CPUUtilization',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static freeableMemoryAverage(dimensions) {
        return {
            namespace: 'AWS/ElastiCache',
            metricName: 'FreeableMemory',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static swapUsageAverage(dimensions) {
        return {
            namespace: 'AWS/ElastiCache',
            metricName: 'SwapUsage',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static networkBytesInAverage(dimensions) {
        return {
            namespace: 'AWS/ElastiCache',
            metricName: 'NetworkBytesIn',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static networkBytesOutAverage(dimensions) {
        return {
            namespace: 'AWS/ElastiCache',
            metricName: 'NetworkBytesOut',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static currConnectionsSum(dimensions) {
        return {
            namespace: 'AWS/ElastiCache',
            metricName: 'CurrConnections',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static evictionsSum(dimensions) {
        return {
            namespace: 'AWS/ElastiCache',
            metricName: 'Evictions',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static reclaimedSum(dimensions) {
        return {
            namespace: 'AWS/ElastiCache',
            metricName: 'Reclaimed',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static cacheHitsSum(dimensions) {
        return {
            namespace: 'AWS/ElastiCache',
            metricName: 'CacheHits',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static cacheMissesSum(dimensions) {
        return {
            namespace: 'AWS/ElastiCache',
            metricName: 'CacheMisses',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static replicationBytesSum(dimensions) {
        return {
            namespace: 'AWS/ElastiCache',
            metricName: 'ReplicationBytes',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static replicationLagAverage(dimensions) {
        return {
            namespace: 'AWS/ElastiCache',
            metricName: 'ReplicationLag',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static bytesUsedForCacheSum(dimensions) {
        return {
            namespace: 'AWS/ElastiCache',
            metricName: 'BytesUsedForCache',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static currItemsSum(dimensions) {
        return {
            namespace: 'AWS/ElastiCache',
            metricName: 'CurrItems',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static casHitsSum(dimensions) {
        return {
            namespace: 'AWS/ElastiCache',
            metricName: 'CasHits',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static casMissesSum(dimensions) {
        return {
            namespace: 'AWS/ElastiCache',
            metricName: 'CasMisses',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static globalDatastoreReplicationLagAverage(dimensions) {
        return {
            namespace: 'AWS/ElastiCache',
            metricName: 'GlobalDatastoreReplicationLag',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
}
exports.ElastiCacheMetrics = ElastiCacheMetrics;
//# sourceMappingURL=data:application/json;base64,
export declare class ElastiCacheMetrics {
    static cpuUtilizationAverage(dimensions: {
        CacheClusterId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensionsMap: {
            CacheClusterId: string;
        };
        statistic: string;
    };
    static freeableMemoryAverage(dimensions: {
        CacheClusterId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensionsMap: {
            CacheClusterId: string;
        };
        statistic: string;
    };
    static swapUsageAverage(dimensions: {
        CacheClusterId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensionsMap: {
            CacheClusterId: string;
        };
        statistic: string;
    };
    static networkBytesInAverage(dimensions: {
        CacheClusterId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensionsMap: {
            CacheClusterId: string;
        };
        statistic: string;
    };
    static networkBytesOutAverage(dimensions: {
        CacheClusterId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensionsMap: {
            CacheClusterId: string;
        };
        statistic: string;
    };
    static currConnectionsSum(dimensions: {
        CacheClusterId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensionsMap: {
            CacheClusterId: string;
        };
        statistic: string;
    };
    static evictionsSum(dimensions: {
        CacheClusterId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensionsMap: {
            CacheClusterId: string;
        };
        statistic: string;
    };
    static reclaimedSum(dimensions: {
        CacheClusterId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensionsMap: {
            CacheClusterId: string;
        };
        statistic: string;
    };
    static cacheHitsSum(dimensions: {
        CacheClusterId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensionsMap: {
            CacheClusterId: string;
        };
        statistic: string;
    };
    static cacheMissesSum(dimensions: {
        CacheClusterId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensionsMap: {
            CacheClusterId: string;
        };
        statistic: string;
    };
    static replicationBytesSum(dimensions: {
        CacheClusterId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensionsMap: {
            CacheClusterId: string;
        };
        statistic: string;
    };
    static replicationLagAverage(dimensions: {
        CacheClusterId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensionsMap: {
            CacheClusterId: string;
        };
        statistic: string;
    };
    static bytesUsedForCacheSum(dimensions: {
        CacheClusterId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensionsMap: {
            CacheClusterId: string;
        };
        statistic: string;
    };
    static currItemsSum(dimensions: {
        CacheClusterId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensionsMap: {
            CacheClusterId: string;
        };
        statistic: string;
    };
    static casHitsSum(dimensions: {
        CacheClusterId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensionsMap: {
            CacheClusterId: string;
        };
        statistic: string;
    };
    static casMissesSum(dimensions: {
        CacheClusterId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensionsMap: {
            CacheClusterId: string;
        };
        statistic: string;
    };
    static globalDatastoreReplicationLagAverage(dimensions: {
        ReplicationGroupId: string;
    }): {
        namespace: string;
        metricName: string;
        dimensionsMap: {
            ReplicationGroupId: string;
        };
        statistic: string;
    };
}

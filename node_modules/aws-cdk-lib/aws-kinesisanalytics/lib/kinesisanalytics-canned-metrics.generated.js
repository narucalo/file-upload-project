"use strict";
// Copyright 2012-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.KinesisAnalyticsMetrics = void 0;
/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control
class KinesisAnalyticsMetrics {
    static bytesAverage(dimensions) {
        return {
            namespace: 'AWS/KinesisAnalytics',
            metricName: 'Bytes',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static kpUsAverage(dimensions) {
        return {
            namespace: 'AWS/KinesisAnalytics',
            metricName: 'KPUs',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static millisBehindLatestAverage(dimensions) {
        return {
            namespace: 'AWS/KinesisAnalytics',
            metricName: 'MillisBehindLatest',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static recordsAverage(dimensions) {
        return {
            namespace: 'AWS/KinesisAnalytics',
            metricName: 'Records',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static successAverage(dimensions) {
        return {
            namespace: 'AWS/KinesisAnalytics',
            metricName: 'Success',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static inputProcessingDurationAverage(dimensions) {
        return {
            namespace: 'AWS/KinesisAnalytics',
            metricName: 'InputProcessing.Duration',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static inputProcessingOkRecordsSum(dimensions) {
        return {
            namespace: 'AWS/KinesisAnalytics',
            metricName: 'InputProcessing.OkRecords',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static inputProcessingOkBytesSum(dimensions) {
        return {
            namespace: 'AWS/KinesisAnalytics',
            metricName: 'InputProcessing.OkBytes',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static inputProcessingDroppedRecordsSum(dimensions) {
        return {
            namespace: 'AWS/KinesisAnalytics',
            metricName: 'InputProcessing.DroppedRecords',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static inputProcessingProcessingFailedRecordsSum(dimensions) {
        return {
            namespace: 'AWS/KinesisAnalytics',
            metricName: 'InputProcessing.ProcessingFailedRecords',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static inputProcessingSuccessSum(dimensions) {
        return {
            namespace: 'AWS/KinesisAnalytics',
            metricName: 'InputProcessing.Success',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static lambdaDeliveryOkRecordsSum(dimensions) {
        return {
            namespace: 'AWS/KinesisAnalytics',
            metricName: 'LambdaDelivery.OkRecords',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static lambdaDeliveryDeliveryFailedRecordsSum(dimensions) {
        return {
            namespace: 'AWS/KinesisAnalytics',
            metricName: 'LambdaDelivery.DeliveryFailedRecords',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static lambdaDeliveryDurationAverage(dimensions) {
        return {
            namespace: 'AWS/KinesisAnalytics',
            metricName: 'LambdaDelivery.Duration',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
}
exports.KinesisAnalyticsMetrics = KinesisAnalyticsMetrics;
//# sourceMappingURL=data:application/json;base64,
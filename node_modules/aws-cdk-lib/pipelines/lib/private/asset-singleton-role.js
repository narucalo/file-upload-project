"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetSingletonRole = void 0;
const iam = require("../../../aws-iam");
const core_1 = require("../../../core");
/**
 * Role which will be reused across asset jobs
 *
 * Has some '*' resources to save IAM policy space, and will not
 * actually add policies that look like policies that were already added.
 */
class AssetSingletonRole extends iam.Role {
    constructor(scope, id, props) {
        super(scope, id, props);
        this._rejectDuplicates = false;
        // Logging permissions
        this.addToPolicy(new iam.PolicyStatement({
            resources: [core_1.Stack.of(this).formatArn({
                    service: 'logs',
                    resource: 'log-group',
                    arnFormat: core_1.ArnFormat.COLON_RESOURCE_NAME,
                    resourceName: '/aws/codebuild/*',
                })],
            actions: ['logs:CreateLogGroup', 'logs:CreateLogStream', 'logs:PutLogEvents'],
        }));
        // CodeBuild report groups
        this.addToPolicy(new iam.PolicyStatement({
            actions: [
                'codebuild:CreateReportGroup',
                'codebuild:CreateReport',
                'codebuild:UpdateReport',
                'codebuild:BatchPutTestCases',
                'codebuild:BatchPutCodeCoverages',
            ],
            resources: [core_1.Stack.of(this).formatArn({
                    service: 'codebuild',
                    resource: 'report-group',
                    resourceName: '*',
                })],
        }));
        // CodeBuild start/stop
        this.addToPolicy(new iam.PolicyStatement({
            resources: ['*'],
            actions: [
                'codebuild:BatchGetBuilds',
                'codebuild:StartBuild',
                'codebuild:StopBuild',
            ],
        }));
        this._rejectDuplicates = true;
    }
    addToPrincipalPolicy(statement) {
        const json = statement.toStatementJson();
        const acts = JSON.stringify(json.Action);
        // These have already been added with wildcard resources on creation
        const alreadyAdded = [
            '["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"]',
            '["codebuild:CreateReportGroup","codebuild:CreateReport","codebuild:UpdateReport","codebuild:BatchPutTestCases","codebuild:BatchPutCodeCoverages"]',
            '["codebuild:BatchGetBuilds","codebuild:StartBuild","codebuild:StopBuild"]',
        ];
        if (this._rejectDuplicates && alreadyAdded.includes(acts)) {
            // Pretend we did it
            return { statementAdded: true, policyDependable: new class {
                } };
        }
        // These are added in duplicate (specifically these come from
        // Project#bindToCodePipeline) -- the original singleton asset role didn't
        // have these, and they're not necessary either, so in order to not cause
        // unnecessary diffs, recognize and drop them there as well.
        if (acts === '["kms:Decrypt","kms:Encrypt","kms:ReEncrypt*","kms:GenerateDataKey*"]') {
            // Pretend we did it
            return { statementAdded: true, policyDependable: new class {
                } };
        }
        return super.addToPrincipalPolicy(statement);
    }
}
exports.AssetSingletonRole = AssetSingletonRole;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtc2luZ2xldG9uLXJvbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhc3NldC1zaW5nbGV0b24tcm9sZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3Q0FBd0M7QUFFeEMsd0NBQWlEO0FBR2pEOzs7OztHQUtHO0FBQ0gsTUFBYSxrQkFBbUIsU0FBUSxHQUFHLENBQUMsSUFBSTtJQUc5QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQW9CO1FBQzVELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBSGxCLHNCQUFpQixHQUFHLEtBQUssQ0FBQztRQUtoQyxzQkFBc0I7UUFDdEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUM7WUFDdkMsU0FBUyxFQUFFLENBQUMsWUFBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUM7b0JBQ25DLE9BQU8sRUFBRSxNQUFNO29CQUNmLFFBQVEsRUFBRSxXQUFXO29CQUNyQixTQUFTLEVBQUUsZ0JBQVMsQ0FBQyxtQkFBbUI7b0JBQ3hDLFlBQVksRUFBRSxrQkFBa0I7aUJBQ2pDLENBQUMsQ0FBQztZQUNILE9BQU8sRUFBRSxDQUFDLHFCQUFxQixFQUFFLHNCQUFzQixFQUFFLG1CQUFtQixDQUFDO1NBQzlFLENBQUMsQ0FBQyxDQUFDO1FBRUosMEJBQTBCO1FBQzFCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUFHLENBQUMsZUFBZSxDQUFDO1lBQ3ZDLE9BQU8sRUFBRTtnQkFDUCw2QkFBNkI7Z0JBQzdCLHdCQUF3QjtnQkFDeEIsd0JBQXdCO2dCQUN4Qiw2QkFBNkI7Z0JBQzdCLGlDQUFpQzthQUNsQztZQUNELFNBQVMsRUFBRSxDQUFDLFlBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDO29CQUNuQyxPQUFPLEVBQUUsV0FBVztvQkFDcEIsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLFlBQVksRUFBRSxHQUFHO2lCQUNsQixDQUFDLENBQUM7U0FDSixDQUFDLENBQUMsQ0FBQztRQUVKLHVCQUF1QjtRQUN2QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQztZQUN2QyxTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUM7WUFDaEIsT0FBTyxFQUFFO2dCQUNQLDBCQUEwQjtnQkFDMUIsc0JBQXNCO2dCQUN0QixxQkFBcUI7YUFDdEI7U0FDRixDQUFDLENBQUMsQ0FBQztRQUVKLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7S0FDL0I7SUFFTSxvQkFBb0IsQ0FBQyxTQUEwQjtRQUNwRCxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDekMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFekMsb0VBQW9FO1FBQ3BFLE1BQU0sWUFBWSxHQUFHO1lBQ25CLG9FQUFvRTtZQUNwRSxtSkFBbUo7WUFDbkosMkVBQTJFO1NBQzVFLENBQUM7UUFFRixJQUFJLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3pELG9CQUFvQjtZQUNwQixPQUFPLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxJQUFJO2lCQUFnQyxFQUFFLENBQUM7U0FDekY7UUFFRCw2REFBNkQ7UUFDN0QsMEVBQTBFO1FBQzFFLHlFQUF5RTtRQUN6RSw0REFBNEQ7UUFDNUQsSUFBSSxJQUFJLEtBQUssdUVBQXVFLEVBQUU7WUFDcEYsb0JBQW9CO1lBQ3BCLE9BQU8sRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLElBQUk7aUJBQWdDLEVBQUUsQ0FBQztTQUN6RjtRQUVELE9BQU8sS0FBSyxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQzlDO0NBQ0Y7QUF6RUQsZ0RBeUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaWFtIGZyb20gJy4uLy4uLy4uL2F3cy1pYW0nO1xuaW1wb3J0IHsgUG9saWN5U3RhdGVtZW50IH0gZnJvbSAnLi4vLi4vLi4vYXdzLWlhbSc7XG5pbXBvcnQgeyBBcm5Gb3JtYXQsIFN0YWNrIH0gZnJvbSAnLi4vLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QsIElEZXBlbmRhYmxlIH0gZnJvbSAnY29uc3RydWN0cyc7XG5cbi8qKlxuICogUm9sZSB3aGljaCB3aWxsIGJlIHJldXNlZCBhY3Jvc3MgYXNzZXQgam9ic1xuICpcbiAqIEhhcyBzb21lICcqJyByZXNvdXJjZXMgdG8gc2F2ZSBJQU0gcG9saWN5IHNwYWNlLCBhbmQgd2lsbCBub3RcbiAqIGFjdHVhbGx5IGFkZCBwb2xpY2llcyB0aGF0IGxvb2sgbGlrZSBwb2xpY2llcyB0aGF0IHdlcmUgYWxyZWFkeSBhZGRlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIEFzc2V0U2luZ2xldG9uUm9sZSBleHRlbmRzIGlhbS5Sb2xlIHtcbiAgcHJpdmF0ZSBfcmVqZWN0RHVwbGljYXRlcyA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBpYW0uUm9sZVByb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICAvLyBMb2dnaW5nIHBlcm1pc3Npb25zXG4gICAgdGhpcy5hZGRUb1BvbGljeShuZXcgaWFtLlBvbGljeVN0YXRlbWVudCh7XG4gICAgICByZXNvdXJjZXM6IFtTdGFjay5vZih0aGlzKS5mb3JtYXRBcm4oe1xuICAgICAgICBzZXJ2aWNlOiAnbG9ncycsXG4gICAgICAgIHJlc291cmNlOiAnbG9nLWdyb3VwJyxcbiAgICAgICAgYXJuRm9ybWF0OiBBcm5Gb3JtYXQuQ09MT05fUkVTT1VSQ0VfTkFNRSxcbiAgICAgICAgcmVzb3VyY2VOYW1lOiAnL2F3cy9jb2RlYnVpbGQvKicsXG4gICAgICB9KV0sXG4gICAgICBhY3Rpb25zOiBbJ2xvZ3M6Q3JlYXRlTG9nR3JvdXAnLCAnbG9nczpDcmVhdGVMb2dTdHJlYW0nLCAnbG9nczpQdXRMb2dFdmVudHMnXSxcbiAgICB9KSk7XG5cbiAgICAvLyBDb2RlQnVpbGQgcmVwb3J0IGdyb3Vwc1xuICAgIHRoaXMuYWRkVG9Qb2xpY3kobmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgYWN0aW9uczogW1xuICAgICAgICAnY29kZWJ1aWxkOkNyZWF0ZVJlcG9ydEdyb3VwJyxcbiAgICAgICAgJ2NvZGVidWlsZDpDcmVhdGVSZXBvcnQnLFxuICAgICAgICAnY29kZWJ1aWxkOlVwZGF0ZVJlcG9ydCcsXG4gICAgICAgICdjb2RlYnVpbGQ6QmF0Y2hQdXRUZXN0Q2FzZXMnLFxuICAgICAgICAnY29kZWJ1aWxkOkJhdGNoUHV0Q29kZUNvdmVyYWdlcycsXG4gICAgICBdLFxuICAgICAgcmVzb3VyY2VzOiBbU3RhY2sub2YodGhpcykuZm9ybWF0QXJuKHtcbiAgICAgICAgc2VydmljZTogJ2NvZGVidWlsZCcsXG4gICAgICAgIHJlc291cmNlOiAncmVwb3J0LWdyb3VwJyxcbiAgICAgICAgcmVzb3VyY2VOYW1lOiAnKicsXG4gICAgICB9KV0sXG4gICAgfSkpO1xuXG4gICAgLy8gQ29kZUJ1aWxkIHN0YXJ0L3N0b3BcbiAgICB0aGlzLmFkZFRvUG9saWN5KG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KHtcbiAgICAgIHJlc291cmNlczogWycqJ10sXG4gICAgICBhY3Rpb25zOiBbXG4gICAgICAgICdjb2RlYnVpbGQ6QmF0Y2hHZXRCdWlsZHMnLFxuICAgICAgICAnY29kZWJ1aWxkOlN0YXJ0QnVpbGQnLFxuICAgICAgICAnY29kZWJ1aWxkOlN0b3BCdWlsZCcsXG4gICAgICBdLFxuICAgIH0pKTtcblxuICAgIHRoaXMuX3JlamVjdER1cGxpY2F0ZXMgPSB0cnVlO1xuICB9XG5cbiAgcHVibGljIGFkZFRvUHJpbmNpcGFsUG9saWN5KHN0YXRlbWVudDogUG9saWN5U3RhdGVtZW50KTogaWFtLkFkZFRvUHJpbmNpcGFsUG9saWN5UmVzdWx0IHtcbiAgICBjb25zdCBqc29uID0gc3RhdGVtZW50LnRvU3RhdGVtZW50SnNvbigpO1xuICAgIGNvbnN0IGFjdHMgPSBKU09OLnN0cmluZ2lmeShqc29uLkFjdGlvbik7XG5cbiAgICAvLyBUaGVzZSBoYXZlIGFscmVhZHkgYmVlbiBhZGRlZCB3aXRoIHdpbGRjYXJkIHJlc291cmNlcyBvbiBjcmVhdGlvblxuICAgIGNvbnN0IGFscmVhZHlBZGRlZCA9IFtcbiAgICAgICdbXCJsb2dzOkNyZWF0ZUxvZ0dyb3VwXCIsXCJsb2dzOkNyZWF0ZUxvZ1N0cmVhbVwiLFwibG9nczpQdXRMb2dFdmVudHNcIl0nLFxuICAgICAgJ1tcImNvZGVidWlsZDpDcmVhdGVSZXBvcnRHcm91cFwiLFwiY29kZWJ1aWxkOkNyZWF0ZVJlcG9ydFwiLFwiY29kZWJ1aWxkOlVwZGF0ZVJlcG9ydFwiLFwiY29kZWJ1aWxkOkJhdGNoUHV0VGVzdENhc2VzXCIsXCJjb2RlYnVpbGQ6QmF0Y2hQdXRDb2RlQ292ZXJhZ2VzXCJdJyxcbiAgICAgICdbXCJjb2RlYnVpbGQ6QmF0Y2hHZXRCdWlsZHNcIixcImNvZGVidWlsZDpTdGFydEJ1aWxkXCIsXCJjb2RlYnVpbGQ6U3RvcEJ1aWxkXCJdJyxcbiAgICBdO1xuXG4gICAgaWYgKHRoaXMuX3JlamVjdER1cGxpY2F0ZXMgJiYgYWxyZWFkeUFkZGVkLmluY2x1ZGVzKGFjdHMpKSB7XG4gICAgICAvLyBQcmV0ZW5kIHdlIGRpZCBpdFxuICAgICAgcmV0dXJuIHsgc3RhdGVtZW50QWRkZWQ6IHRydWUsIHBvbGljeURlcGVuZGFibGU6IG5ldyBjbGFzcyBpbXBsZW1lbnRzIElEZXBlbmRhYmxlIHsgfSB9O1xuICAgIH1cblxuICAgIC8vIFRoZXNlIGFyZSBhZGRlZCBpbiBkdXBsaWNhdGUgKHNwZWNpZmljYWxseSB0aGVzZSBjb21lIGZyb21cbiAgICAvLyBQcm9qZWN0I2JpbmRUb0NvZGVQaXBlbGluZSkgLS0gdGhlIG9yaWdpbmFsIHNpbmdsZXRvbiBhc3NldCByb2xlIGRpZG4ndFxuICAgIC8vIGhhdmUgdGhlc2UsIGFuZCB0aGV5J3JlIG5vdCBuZWNlc3NhcnkgZWl0aGVyLCBzbyBpbiBvcmRlciB0byBub3QgY2F1c2VcbiAgICAvLyB1bm5lY2Vzc2FyeSBkaWZmcywgcmVjb2duaXplIGFuZCBkcm9wIHRoZW0gdGhlcmUgYXMgd2VsbC5cbiAgICBpZiAoYWN0cyA9PT0gJ1tcImttczpEZWNyeXB0XCIsXCJrbXM6RW5jcnlwdFwiLFwia21zOlJlRW5jcnlwdCpcIixcImttczpHZW5lcmF0ZURhdGFLZXkqXCJdJykge1xuICAgICAgLy8gUHJldGVuZCB3ZSBkaWQgaXRcbiAgICAgIHJldHVybiB7IHN0YXRlbWVudEFkZGVkOiB0cnVlLCBwb2xpY3lEZXBlbmRhYmxlOiBuZXcgY2xhc3MgaW1wbGVtZW50cyBJRGVwZW5kYWJsZSB7IH0gfTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIuYWRkVG9QcmluY2lwYWxQb2xpY3koc3RhdGVtZW50KTtcbiAgfVxufVxuIl19
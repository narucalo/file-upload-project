"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublishAssetsAction = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs = require("fs");
const path = require("path");
const codebuild = require("../../../../aws-codebuild");
const codepipeline_actions = require("../../../../aws-codepipeline-actions");
const core_1 = require("../../../../core");
const constructs_1 = require("constructs");
const asset_type_1 = require("../../blueprint/asset-type");
const fs_1 = require("../../private/fs");
/**
 * (deprecated) Action to publish an asset in the pipeline.
 *
 * Creates a CodeBuild project which will use the CDK CLI
 * to prepare and publish the asset.
 *
 * You do not need to instantiate this action -- it will automatically
 * be added by the pipeline when you add stacks that use assets.
 *
 * @deprecated This class is part of the old API. Use the API based on the `CodePipeline` class instead
 */
class PublishAssetsAction extends constructs_1.Construct {
    /**
     * @deprecated
     */
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        this.commands = new Array();
        const installSuffix = props.cdkCliVersion ? `@${props.cdkCliVersion}` : '';
        const installCommand = `npm install -g cdk-assets${installSuffix}`;
        const buildSpec = codebuild.BuildSpec.fromObject({
            version: '0.2',
            phases: {
                install: {
                    commands: props.preInstallCommands ? [...props.preInstallCommands, installCommand] : installCommand,
                },
                build: {
                    commands: core_1.Lazy.list({ produce: () => this.commands }),
                },
            },
        });
        this.buildSpec = props.buildSpec ? codebuild.mergeBuildSpecs(props.buildSpec, buildSpec) : buildSpec;
        const project = new codebuild.PipelineProject(this, 'Default', {
            projectName: this.props.projectName,
            environment: {
                buildImage: codebuild.LinuxBuildImage.STANDARD_5_0,
                privileged: (props.assetType === asset_type_1.AssetType.DOCKER_IMAGE) ? true : undefined,
            },
            vpc: props.vpc,
            subnetSelection: props.subnetSelection,
            buildSpec: props.createBuildspecFile ? codebuild.BuildSpec.fromSourceFilename(this.getBuildSpecFileName()) : this.buildSpec,
            role: props.role,
        });
        if (props.dependable) {
            project.node.addDependency(props.dependable);
        }
        this.action = new codepipeline_actions.CodeBuildAction({
            actionName: props.actionName,
            project,
            input: this.props.cloudAssemblyInput,
            role: props.role,
            // Add this purely so that the pipeline will selfupdate if the CLI version changes
            environmentVariables: props.cdkCliVersion ? {
                CDK_CLI_VERSION: { value: props.cdkCliVersion },
            } : undefined,
        });
        core_1.attachCustomSynthesis(this, {
            onSynthesize: this._onSynth.bind(this),
        });
    }
    getBuildSpecFileName() {
        return `buildspec-assets-${this.node.path.replace(new RegExp('/', 'g'), '-')}.yaml`;
    }
    _onSynth(session) {
        if (this.props.createBuildspecFile) {
            const specFile = path.join(session.outdir, this.getBuildSpecFileName());
            fs.writeFileSync(specFile, core_1.Stack.of(this).resolve(this.buildSpec.toBuildSpec()), { encoding: 'utf-8' });
        }
    }
    /**
     * (deprecated) Add a single publishing command.
     *
     * Manifest path should be relative to the root Cloud Assembly.
     *
     * @deprecated
     */
    addPublishCommand(relativeManifestPath, assetSelector) {
        const command = `cdk-assets --path "${fs_1.toPosixPath(relativeManifestPath)}" --verbose publish "${assetSelector}"`;
        if (!this.commands.includes(command)) {
            this.commands.push(command);
        }
    }
    /**
     * (deprecated) Exists to implement IAction.
     *
     * @deprecated
     */
    bind(scope, stage, options) {
        return this.action.bind(scope, stage, options);
    }
    /**
     * (deprecated) Exists to implement IAction.
     *
     * @deprecated
     */
    onStateChange(name, target, options) {
        return this.action.onStateChange(name, target, options);
    }
    /**
     * (deprecated) Exists to implement IAction.
     *
     * @deprecated
     */
    get actionProperties() {
        // FIXME: I have had to make this class a Construct, because:
        //
        // - It needs access to the Construct tree, because it is going to add a `PipelineProject`.
        // - I would have liked to have done that in bind(), however,
        // - `actionProperties` (this method) is called BEFORE bind() is called, and by that point I
        //   don't have the "inner" Action yet to forward the call to.
        //
        // I've therefore had to construct the inner CodeBuildAction in the constructor, which requires making this
        // Action a Construct.
        //
        // Combined with how non-intuitive it is to make the "StackDeployAction", I feel there is something
        // wrong with the Action abstraction here.
        return this.action.actionProperties;
    }
}
exports.PublishAssetsAction = PublishAssetsAction;
_a = JSII_RTTI_SYMBOL_1;
PublishAssetsAction[_a] = { fqn: "aws-cdk-lib.pipelines.PublishAssetsAction", version: "2.0.0" };
//# sourceMappingURL=data:application/json;base64,
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackDeployment = void 0;
const jsiiDeprecationWarnings = require("../../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path = require("path");
const url_1 = require("url");
const cxapi = require("../../../cx-api");
const asset_manifest_1 = require("../private/asset-manifest");
const cloud_assembly_internals_1 = require("../private/cloud-assembly-internals");
const asset_type_1 = require("./asset-type");
/**
 * Deployment of a single Stack.
 *
 * You don't need to instantiate this class -- it will
 * be automatically instantiated as necessary when you
 * add a `Stage` to a pipeline.
 *
 * @stability stable
 */
class StackDeployment {
    constructor(props) {
        var _b, _c;
        /**
         * Other stacks this stack depends on.
         *
         * @stability stable
         */
        this.stackDependencies = [];
        /**
         * Steps that take place before stack is prepared.
         *
         * If your pipeline engine disables 'prepareStep', then this will happen before stack deploys
         *
         * @stability stable
         */
        this.pre = [];
        /**
         * Steps that take place after stack is prepared but before stack deploys.
         *
         * Your pipeline engine may not disable `prepareStep`.
         *
         * @stability stable
         */
        this.changeSet = [];
        /**
         * Steps to execute after stack deploys.
         *
         * @stability stable
         */
        this.post = [];
        this.stackArtifactId = props.stackArtifactId;
        this.constructPath = props.constructPath;
        this.account = props.account;
        this.region = props.region;
        this.tags = (_b = props.tags) !== null && _b !== void 0 ? _b : {};
        this.assumeRoleArn = props.assumeRoleArn;
        this.executionRoleArn = props.executionRoleArn;
        this.stackName = props.stackName;
        this.absoluteTemplatePath = props.absoluteTemplatePath;
        this.templateUrl = props.templateS3Uri ? s3UrlFromUri(props.templateS3Uri, props.region) : undefined;
        this.assets = new Array();
        for (const asset of (_c = props.assets) !== null && _c !== void 0 ? _c : []) {
            if (asset.isTemplate) {
                this.templateAsset = asset;
            }
            else {
                this.assets.push(asset);
            }
        }
    }
    /**
     * Build a `StackDeployment` from a Stack Artifact in a Cloud Assembly.
     *
     * @stability stable
     */
    static fromArtifact(stackArtifact) {
        jsiiDeprecationWarnings.aws_cdk_lib_cx_api_CloudFormationStackArtifact(stackArtifact);
        const artRegion = stackArtifact.environment.region;
        const region = artRegion === cxapi.UNKNOWN_REGION ? undefined : artRegion;
        const artAccount = stackArtifact.environment.account;
        const account = artAccount === cxapi.UNKNOWN_ACCOUNT ? undefined : artAccount;
        return new StackDeployment({
            account,
            region,
            tags: stackArtifact.tags,
            stackArtifactId: stackArtifact.id,
            constructPath: stackArtifact.hierarchicalId,
            stackName: stackArtifact.stackName,
            absoluteTemplatePath: path.join(stackArtifact.assembly.directory, stackArtifact.templateFile),
            assumeRoleArn: stackArtifact.assumeRoleArn,
            executionRoleArn: stackArtifact.cloudFormationExecutionRoleArn,
            assets: extractStackAssets(stackArtifact),
            templateS3Uri: stackArtifact.stackTemplateAssetObjectUrl,
        });
    }
    /**
     * Add a dependency on another stack.
     *
     * @stability stable
     */
    addStackDependency(stackDeployment) {
        jsiiDeprecationWarnings.aws_cdk_lib_pipelines_StackDeployment(stackDeployment);
        this.stackDependencies.push(stackDeployment);
    }
    /**
     * Adds steps to each phase of the stack.
     *
     * @param pre steps executed before stack.prepare.
     * @param changeSet steps executed after stack.prepare and before stack.deploy.
     * @param post steps executed after stack.deploy.
     * @stability stable
     */
    addStackSteps(pre, changeSet, post) {
        this.pre.push(...pre);
        this.changeSet.push(...changeSet);
        this.post.push(...post);
    }
}
exports.StackDeployment = StackDeployment;
_a = JSII_RTTI_SYMBOL_1;
StackDeployment[_a] = { fqn: "aws-cdk-lib.pipelines.StackDeployment", version: "2.0.0" };
function extractStackAssets(stackArtifact) {
    const ret = new Array();
    const assetManifests = stackArtifact.dependencies.filter(cloud_assembly_internals_1.isAssetManifest);
    for (const manifestArtifact of assetManifests) {
        const manifest = asset_manifest_1.AssetManifestReader.fromFile(manifestArtifact.file);
        for (const entry of manifest.entries) {
            let assetType;
            let isTemplate = false;
            if (entry instanceof asset_manifest_1.DockerImageManifestEntry) {
                assetType = asset_type_1.AssetType.DOCKER_IMAGE;
            }
            else if (entry instanceof asset_manifest_1.FileManifestEntry) {
                isTemplate = entry.source.packaging === 'file' && entry.source.path === stackArtifact.templateFile;
                assetType = asset_type_1.AssetType.FILE;
            }
            else {
                throw new Error(`Unrecognized asset type: ${entry.type}`);
            }
            ret.push({
                assetManifestPath: manifestArtifact.file,
                assetId: entry.id.assetId,
                assetSelector: entry.id.toString(),
                assetType,
                assetPublishingRoleArn: entry.destination.assumeRoleArn,
                isTemplate,
            });
        }
    }
    return ret;
}
/**
 * Takes an s3://bucket/object-key uri and returns a region-aware https:// url for it
 *
 * @param uri The s3 URI
 * @param region The region (if undefined, we will return the global endpoint)
 * @see https://docs.aws.amazon.com/AmazonS3/latest/userguide/VirtualHosting.html#virtual-hosted-style-access
 */
function s3UrlFromUri(uri, region) {
    const url = url_1.parse(uri);
    return `https://${url.hostname}.s3.${region ? `${region}.` : ''}amazonaws.com${url.path}`;
}
//# sourceMappingURL=data:application/json;base64,
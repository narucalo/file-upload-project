"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StageDeployment = void 0;
const jsiiDeprecationWarnings = require("../../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cloud_assembly_internals_1 = require("../private/cloud-assembly-internals");
const construct_internals_1 = require("../private/construct-internals");
const stack_deployment_1 = require("./stack-deployment");
/**
 * Deployment of a single `Stage`.
 *
 * A `Stage` consists of one or more `Stacks`, which will be
 * deployed in dependency order.
 *
 * @stability stable
 */
class StageDeployment {
    constructor(
    /** The stacks deployed in this stage */
    stacks, props = {}) {
        var _b, _c, _d, _e;
        this.stacks = stacks;
        this.stageName = (_b = props.stageName) !== null && _b !== void 0 ? _b : '';
        this.pre = (_c = props.pre) !== null && _c !== void 0 ? _c : [];
        this.post = (_d = props.post) !== null && _d !== void 0 ? _d : [];
        this.stackSteps = (_e = props.stackSteps) !== null && _e !== void 0 ? _e : [];
    }
    /**
     * Create a new `StageDeployment` from a `Stage`.
     *
     * Synthesizes the target stage, and deployes the stacks found inside
     * in dependency order.
     *
     * @stability stable
     */
    static fromStage(stage, props = {}) {
        var _b, _c, _d;
        jsiiDeprecationWarnings.aws_cdk_lib_Stage(stage);
        jsiiDeprecationWarnings.aws_cdk_lib_pipelines_StageDeploymentProps(props);
        const assembly = construct_internals_1.pipelineSynth(stage);
        if (assembly.stacks.length === 0) {
            // If we don't check here, a more puzzling "stage contains no actions"
            // error will be thrown come deployment time.
            throw new Error(`The given Stage construct ('${stage.node.path}') should contain at least one Stack`);
        }
        const stepFromArtifact = new Map();
        for (const artifact of assembly.stacks) {
            const step = stack_deployment_1.StackDeployment.fromArtifact(artifact);
            stepFromArtifact.set(artifact, step);
        }
        if (props.stackSteps) {
            for (const stackstep of props.stackSteps) {
                const stackArtifact = assembly.getStackArtifact(stackstep.stack.artifactId);
                const thisStep = stepFromArtifact.get(stackArtifact);
                if (!thisStep) {
                    throw new Error('Logic error: we just added a step for this artifact but it disappeared.');
                }
                thisStep.addStackSteps((_b = stackstep.pre) !== null && _b !== void 0 ? _b : [], (_c = stackstep.changeSet) !== null && _c !== void 0 ? _c : [], (_d = stackstep.post) !== null && _d !== void 0 ? _d : []);
            }
        }
        for (const artifact of assembly.stacks) {
            const thisStep = stepFromArtifact.get(artifact);
            if (!thisStep) {
                throw new Error('Logic error: we just added a step for this artifact but it disappeared.');
            }
            const stackDependencies = artifact.dependencies.filter(cloud_assembly_internals_1.isStackArtifact);
            for (const dep of stackDependencies) {
                const depStep = stepFromArtifact.get(dep);
                if (!depStep) {
                    throw new Error(`Stack '${artifact.id}' depends on stack not found in same Stage: '${dep.id}'`);
                }
                thisStep.addStackDependency(depStep);
            }
        }
        return new StageDeployment(Array.from(stepFromArtifact.values()), {
            stageName: stage.stageName,
            ...props,
        });
    }
    /**
     * Add an additional step to run before any of the stacks in this stage.
     *
     * @stability stable
     */
    addPre(...steps) {
        jsiiDeprecationWarnings.aws_cdk_lib_pipelines_Step(steps);
        this.pre.push(...steps);
    }
    /**
     * Add an additional step to run after all of the stacks in this stage.
     *
     * @stability stable
     */
    addPost(...steps) {
        jsiiDeprecationWarnings.aws_cdk_lib_pipelines_Step(steps);
        this.post.push(...steps);
    }
}
exports.StageDeployment = StageDeployment;
_a = JSII_RTTI_SYMBOL_1;
StageDeployment[_a] = { fqn: "aws-cdk-lib.pipelines.StageDeployment", version: "2.0.0" };
//# sourceMappingURL=data:application/json;base64,
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Step = void 0;
const jsiiDeprecationWarnings = require("../../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("../../../core");
/**
 * A generic Step which can be added to a Pipeline.
 *
 * Steps can be used to add Sources, Build Actions and Validations
 * to your pipeline.
 *
 * This class is abstract. See specific subclasses of Step for
 * useful steps to add to your Pipeline
 *
 * @stability stable
 */
class Step {
    /**
     * @param id Identifier for this step.
     * @stability stable
     */
    constructor(
    /** Identifier for this step */
    id) {
        this.id = id;
        /**
         * The list of FileSets consumed by this Step.
         *
         * @stability stable
         */
        this.dependencyFileSets = [];
        /**
         * Whether or not this is a Source step.
         *
         * What it means to be a Source step depends on the engine.
         *
         * @stability stable
         */
        this.isSource = false;
        if (core_1.Token.isUnresolved(id)) {
            throw new Error(`Step id cannot be unresolved, got '${id}'`);
        }
    }
    /**
     * Return the steps this step depends on, based on the FileSets it requires.
     *
     * @stability stable
     */
    get dependencies() {
        return this.dependencyFileSets.map(f => f.producer);
    }
    /**
     * Return a string representation of this Step.
     *
     * @stability stable
     */
    toString() {
        return `${this.constructor.name}(${this.id})`;
    }
    /**
     * The primary FileSet produced by this Step.
     *
     * Not all steps produce an output FileSet--if they do
     * you can substitute the `Step` object for the `FileSet` object.
     *
     * @stability stable
     */
    get primaryOutput() {
        // Accessor so it can be mutable in children
        return this._primaryOutput;
    }
    /**
     * Add an additional FileSet to the set of file sets required by this step.
     *
     * This will lead to a dependency on the producer of that file set.
     *
     * @stability stable
     */
    addDependencyFileSet(fs) {
        jsiiDeprecationWarnings.aws_cdk_lib_pipelines_FileSet(fs);
        this.dependencyFileSets.push(fs);
    }
    /**
     * Configure the given FileSet as the primary output of this step.
     *
     * @stability stable
     */
    configurePrimaryOutput(fs) {
        jsiiDeprecationWarnings.aws_cdk_lib_pipelines_FileSet(fs);
        this._primaryOutput = fs;
    }
}
exports.Step = Step;
_a = JSII_RTTI_SYMBOL_1;
Step[_a] = { fqn: "aws-cdk-lib.pipelines.Step", version: "2.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInN0ZXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsd0NBQTZDOzs7Ozs7Ozs7Ozs7QUFJN0MsTUFBc0IsSUFBSTs7Ozs7SUFTeEI7SUFDRSwrQkFBK0I7SUFDZixFQUFVO1FBQVYsT0FBRSxHQUFGLEVBQUUsQ0FBUTs7Ozs7O1FBVFosdUJBQWtCLEdBQWMsRUFBRSxDQUFDOzs7Ozs7OztRQUduQyxhQUFRLEdBQVksS0FBSyxDQUFDO1FBUXhDLElBQUksWUFBSyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQzlEO0tBQ0Y7Ozs7OztJQUdELElBQVcsWUFBWTtRQUNyQixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDckQ7Ozs7OztJQUdNLFFBQVE7UUFDYixPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDO0tBQy9DOzs7Ozs7Ozs7SUFHRCxJQUFXLGFBQWE7UUFDdEIsNENBQTRDO1FBQzVDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztLQUM1Qjs7Ozs7Ozs7SUFHUyxvQkFBb0IsQ0FBQyxFQUFXOztRQUN4QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ2xDOzs7Ozs7SUFHUyxzQkFBc0IsQ0FBQyxFQUFXOztRQUMxQyxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztLQUMxQjs7QUExQ0gsb0JBMkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhY2ssIFRva2VuIH0gZnJvbSAnLi4vLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBGaWxlU2V0LCBJRmlsZVNldFByb2R1Y2VyIH0gZnJvbSAnLi9maWxlLXNldCc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFN0ZXAgaW1wbGVtZW50cyBJRmlsZVNldFByb2R1Y2VyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyByZWFkb25seSBkZXBlbmRlbmN5RmlsZVNldHM6IEZpbGVTZXRbXSA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHJlYWRvbmx5IGlzU291cmNlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBfcHJpbWFyeU91dHB1dD86IEZpbGVTZXQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgLyoqIElkZW50aWZpZXIgZm9yIHRoaXMgc3RlcCAqL1xuICAgIHB1YmxpYyByZWFkb25seSBpZDogc3RyaW5nKSB7XG5cbiAgICBpZiAoVG9rZW4uaXNVbnJlc29sdmVkKGlkKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdGVwIGlkIGNhbm5vdCBiZSB1bnJlc29sdmVkLCBnb3QgJyR7aWR9J2ApO1xuICAgIH1cbiAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgZ2V0IGRlcGVuZGVuY2llcygpOiBTdGVwW10ge1xuICAgIHJldHVybiB0aGlzLmRlcGVuZGVuY3lGaWxlU2V0cy5tYXAoZiA9PiBmLnByb2R1Y2VyKTtcbiAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9KCR7dGhpcy5pZH0pYDtcbiAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgZ2V0IHByaW1hcnlPdXRwdXQoKTogRmlsZVNldCB8IHVuZGVmaW5lZCB7XG4gICAgLy8gQWNjZXNzb3Igc28gaXQgY2FuIGJlIG11dGFibGUgaW4gY2hpbGRyZW5cbiAgICByZXR1cm4gdGhpcy5fcHJpbWFyeU91dHB1dDtcbiAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHByb3RlY3RlZCBhZGREZXBlbmRlbmN5RmlsZVNldChmczogRmlsZVNldCkge1xuICAgIHRoaXMuZGVwZW5kZW5jeUZpbGVTZXRzLnB1c2goZnMpO1xuICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHJvdGVjdGVkIGNvbmZpZ3VyZVByaW1hcnlPdXRwdXQoZnM6IEZpbGVTZXQpIHtcbiAgICB0aGlzLl9wcmltYXJ5T3V0cHV0ID0gZnM7XG4gIH1cbn1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgaW50ZXJmYWNlIFN0YWNrU3RlcHMge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICByZWFkb25seSBzdGFjazogU3RhY2s7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IHByZT86IFN0ZXBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IGNoYW5nZVNldD86IFN0ZXBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICByZWFkb25seSBwb3N0PzogU3RlcFtdO1xuXG59Il19
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSet = void 0;
const jsiiDeprecationWarnings = require("../../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * A set of files traveling through the deployment pipeline.
 *
 * Individual steps in the pipeline produce or consume
 * `FileSet`s.
 *
 * @stability stable
 */
class FileSet {
    /**
     * @param id Human-readable descriptor for this file set (does not need to be unique).
     * @stability stable
     */
    constructor(
    /** Human-readable descriptor for this file set (does not need to be unique) */
    id, producer) {
        this.id = id;
        /**
         * The primary output of a file set producer.
         *
         * The primary output of a FileSet is itself.
         *
         * @stability stable
         */
        this.primaryOutput = this;
        jsiiDeprecationWarnings.aws_cdk_lib_pipelines_Step(producer);
        this._producer = producer;
    }
    /**
     * The Step that produces this FileSet.
     *
     * @stability stable
     */
    get producer() {
        if (!this._producer) {
            throw new Error(`FileSet '${this.id}' doesn\'t have a producer; call 'fileSet.producedBy()'`);
        }
        return this._producer;
    }
    /**
     * Mark the given Step as the producer for this FileSet.
     *
     * This method can only be called once.
     *
     * @stability stable
     */
    producedBy(producer) {
        jsiiDeprecationWarnings.aws_cdk_lib_pipelines_Step(producer);
        if (this._producer) {
            throw new Error(`FileSet '${this.id}' already has a producer (${this._producer}) while setting producer: ${producer}`);
        }
        this._producer = producer;
    }
    /**
     * Return a string representation of this FileSet.
     *
     * @stability stable
     */
    toString() {
        return `FileSet(${this.id})`;
    }
}
exports.FileSet = FileSet;
_a = JSII_RTTI_SYMBOL_1;
FileSet[_a] = { fqn: "aws-cdk-lib.pipelines.FileSet", version: "2.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1zZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmaWxlLXNldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUdBLE1BQWEsT0FBTzs7Ozs7SUFLbEI7SUFDRSwrRUFBK0U7SUFDL0QsRUFBVSxFQUFFLFFBQWU7UUFBM0IsT0FBRSxHQUFGLEVBQUUsQ0FBUTs7Ozs7Ozs7UUFMWixrQkFBYSxHQUFhLElBQUksQ0FBQzs7UUFNN0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7S0FDM0I7Ozs7OztJQUdELElBQVcsUUFBUTtRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNuQixNQUFNLElBQUksS0FBSyxDQUFDLFlBQVksSUFBSSxDQUFDLEVBQUUseURBQXlELENBQUMsQ0FBQztTQUMvRjtRQUNELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztLQUN2Qjs7Ozs7Ozs7SUFHTSxVQUFVLENBQUMsUUFBZTs7UUFDL0IsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBWSxJQUFJLENBQUMsRUFBRSw2QkFBNkIsSUFBSSxDQUFDLFNBQVMsNkJBQTZCLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDeEg7UUFDRCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztLQUMzQjs7Ozs7O0lBR00sUUFBUTtRQUNiLE9BQU8sV0FBVyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUM7S0FDOUI7O0FBOUJILDBCQStCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0ZXAgfSBmcm9tICcuL3N0ZXAnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGNsYXNzIEZpbGVTZXQgaW1wbGVtZW50cyBJRmlsZVNldFByb2R1Y2VyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgcmVhZG9ubHkgcHJpbWFyeU91dHB1dD86IEZpbGVTZXQgPSB0aGlzO1xuICBwcml2YXRlIF9wcm9kdWNlcj86IFN0ZXA7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgLyoqIEh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0b3IgZm9yIHRoaXMgZmlsZSBzZXQgKGRvZXMgbm90IG5lZWQgdG8gYmUgdW5pcXVlKSAqL1xuICAgIHB1YmxpYyByZWFkb25seSBpZDogc3RyaW5nLCBwcm9kdWNlcj86IFN0ZXApIHtcbiAgICB0aGlzLl9wcm9kdWNlciA9IHByb2R1Y2VyO1xuICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIGdldCBwcm9kdWNlcigpIHtcbiAgICBpZiAoIXRoaXMuX3Byb2R1Y2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpbGVTZXQgJyR7dGhpcy5pZH0nIGRvZXNuXFwndCBoYXZlIGEgcHJvZHVjZXI7IGNhbGwgJ2ZpbGVTZXQucHJvZHVjZWRCeSgpJ2ApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcHJvZHVjZXI7XG4gIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHByb2R1Y2VkQnkocHJvZHVjZXI/OiBTdGVwKSB7XG4gICAgaWYgKHRoaXMuX3Byb2R1Y2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpbGVTZXQgJyR7dGhpcy5pZH0nIGFscmVhZHkgaGFzIGEgcHJvZHVjZXIgKCR7dGhpcy5fcHJvZHVjZXJ9KSB3aGlsZSBzZXR0aW5nIHByb2R1Y2VyOiAke3Byb2R1Y2VyfWApO1xuICAgIH1cbiAgICB0aGlzLl9wcm9kdWNlciA9IHByb2R1Y2VyO1xuICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGBGaWxlU2V0KCR7dGhpcy5pZH0pYDtcbiAgfVxufVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgaW50ZXJmYWNlIElGaWxlU2V0UHJvZHVjZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IHByaW1hcnlPdXRwdXQ/OiBGaWxlU2V0O1xufSJdfQ==
"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodePipelineFileSet = exports.ArtifactMap = void 0;
const jsiiDeprecationWarnings = require("../../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const crypto = require("crypto");
const cp = require("../../../aws-codepipeline");
const blueprint_1 = require("../blueprint");
const helpers_internal_1 = require("../helpers-internal");
/**
 * Translate FileSets to CodePipeline Artifacts.
 *
 * @stability stable
 */
class ArtifactMap {
    constructor() {
        this.artifacts = new Map();
        this.usedNames = new Set();
    }
    /**
     * Return the matching CodePipeline artifact for a FileSet.
     *
     * @stability stable
     */
    toCodePipeline(x) {
        jsiiDeprecationWarnings.aws_cdk_lib_pipelines_FileSet(x);
        if (x instanceof CodePipelineFileSet) {
            return x._artifact;
        }
        let ret = this.artifacts.get(x);
        if (!ret) {
            // They all need a name
            const artifactName = this.makeUniqueName(`${x.producer.id}.${x.id}`);
            this.usedNames.add(artifactName);
            this.artifacts.set(x, ret = new cp.Artifact(artifactName));
        }
        return ret;
    }
    makeUniqueName(baseName) {
        let i = 1;
        baseName = sanitizeArtifactName(baseName);
        let name = baseName;
        while (this.usedNames.has(name)) {
            name = `${baseName}${++i}`;
        }
        return name;
    }
}
exports.ArtifactMap = ArtifactMap;
_a = JSII_RTTI_SYMBOL_1;
ArtifactMap[_a] = { fqn: "aws-cdk-lib.pipelines.ArtifactMap", version: "2.0.0" };
/**
 * Sanitize a string to be a valid artifact name
 *
 * This must comport to both the rules of artifacts in CodePipeline, as well
 * as the names of Source Identifiers in CodeBuild.
 *
 * Artifact Name limits aren't documented.
 *
 * Source Identifier limits are documented here:
 * https://docs.aws.amazon.com/codebuild/latest/APIReference/API_ProjectSource.html#CodeBuild-Type-ProjectSource-sourceIdentifier
 */
function sanitizeArtifactName(x) {
    let sani = x.replace(/[^A-Za-z0-9_]/g, '_'); // Charset requirement is imposed by CodeBuild
    const maxLength = 100; // Max length of 100 is imposed by CodePipeline library
    if (sani.length > maxLength) {
        const fingerprint = crypto.createHash('sha256').update(sani).digest('hex').substr(0, 8);
        sani = sani.substr(0, maxLength - fingerprint.length) + fingerprint;
    }
    return sani;
}
/**
 * A FileSet created from a CodePipeline artifact.
 *
 * You only need to use this if you want to add CDK Pipeline stages
 * add the end of an existing CodePipeline, which should be very rare.
 *
 * @stability stable
 */
class CodePipelineFileSet extends blueprint_1.FileSet {
    constructor(artifact) {
        var _c;
        super((_c = artifact.artifactName) !== null && _c !== void 0 ? _c : 'Imported', helpers_internal_1.PipelineGraph.NO_STEP);
        this._artifact = artifact;
    }
    /**
     * Turn a CodePipeline Artifact into a FileSet.
     *
     * @stability stable
     */
    static fromArtifact(artifact) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_codepipeline_Artifact(artifact);
        return new CodePipelineFileSet(artifact);
    }
}
exports.CodePipelineFileSet = CodePipelineFileSet;
_b = JSII_RTTI_SYMBOL_1;
CodePipelineFileSet[_b] = { fqn: "aws-cdk-lib.pipelines.CodePipelineFileSet", version: "2.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJ0aWZhY3QtbWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXJ0aWZhY3QtbWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGlDQUFpQztBQUNqQyxnREFBZ0Q7QUFDaEQsNENBQXVDO0FBQ3ZDLDBEQUFvRDs7Ozs7O0FBR3BELE1BQWEsV0FBVztJQUF4QjtRQUNVLGNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBd0IsQ0FBQztRQUM1QyxjQUFTLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztLQTJCdkM7Ozs7OztJQXhCUSxjQUFjLENBQUMsQ0FBVTs7UUFDOUIsSUFBSSxDQUFDLFlBQVksbUJBQW1CLEVBQUU7WUFDcEMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDO1NBQ3BCO1FBRUQsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNSLHVCQUF1QjtZQUN2QixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDckUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztTQUM1RDtRQUNELE9BQU8sR0FBRyxDQUFDO0tBQ1o7SUFFTyxjQUFjLENBQUMsUUFBZ0I7UUFDckMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsUUFBUSxHQUFHLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFDLElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUNwQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9CLElBQUksR0FBRyxHQUFHLFFBQVEsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1NBQzVCO1FBQ0QsT0FBTyxJQUFJLENBQUM7S0FDYjs7QUE1Qkgsa0NBNkJDOzs7QUFFRDs7Ozs7Ozs7OztHQVVHO0FBQ0gsU0FBUyxvQkFBb0IsQ0FBQyxDQUFTO0lBQ3JDLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyw4Q0FBOEM7SUFDM0YsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLENBQUMsdURBQXVEO0lBRTlFLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxTQUFTLEVBQUU7UUFDM0IsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDeEYsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFNBQVMsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsV0FBVyxDQUFDO0tBQ3JFO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDOzs7Ozs7Ozs7QUFHRCxNQUFhLG1CQUFvQixTQUFRLG1CQUFPO0lBYTlDLFlBQW9CLFFBQXFCOztRQUN2QyxLQUFLLE9BQUMsUUFBUSxDQUFDLFlBQVksbUNBQUksVUFBVSxFQUFFLGdDQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7S0FDM0I7Ozs7OztJQWRNLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBcUI7O1FBQzlDLE9BQU8sSUFBSSxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUMxQzs7QUFKSCxrREFpQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCAqIGFzIGNwIGZyb20gJy4uLy4uLy4uL2F3cy1jb2RlcGlwZWxpbmUnO1xuaW1wb3J0IHsgRmlsZVNldCB9IGZyb20gJy4uL2JsdWVwcmludCc7XG5pbXBvcnQgeyBQaXBlbGluZUdyYXBoIH0gZnJvbSAnLi4vaGVscGVycy1pbnRlcm5hbCc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmV4cG9ydCBjbGFzcyBBcnRpZmFjdE1hcCB7XG4gIHByaXZhdGUgYXJ0aWZhY3RzID0gbmV3IE1hcDxGaWxlU2V0LCBjcC5BcnRpZmFjdD4oKTtcbiAgcHJpdmF0ZSB1c2VkTmFtZXMgPSBuZXcgU2V0PHN0cmluZz4oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyB0b0NvZGVQaXBlbGluZSh4OiBGaWxlU2V0KTogY3AuQXJ0aWZhY3Qge1xuICAgIGlmICh4IGluc3RhbmNlb2YgQ29kZVBpcGVsaW5lRmlsZVNldCkge1xuICAgICAgcmV0dXJuIHguX2FydGlmYWN0O1xuICAgIH1cblxuICAgIGxldCByZXQgPSB0aGlzLmFydGlmYWN0cy5nZXQoeCk7XG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIC8vIFRoZXkgYWxsIG5lZWQgYSBuYW1lXG4gICAgICBjb25zdCBhcnRpZmFjdE5hbWUgPSB0aGlzLm1ha2VVbmlxdWVOYW1lKGAke3gucHJvZHVjZXIuaWR9LiR7eC5pZH1gKTtcbiAgICAgIHRoaXMudXNlZE5hbWVzLmFkZChhcnRpZmFjdE5hbWUpO1xuICAgICAgdGhpcy5hcnRpZmFjdHMuc2V0KHgsIHJldCA9IG5ldyBjcC5BcnRpZmFjdChhcnRpZmFjdE5hbWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIHByaXZhdGUgbWFrZVVuaXF1ZU5hbWUoYmFzZU5hbWU6IHN0cmluZykge1xuICAgIGxldCBpID0gMTtcbiAgICBiYXNlTmFtZSA9IHNhbml0aXplQXJ0aWZhY3ROYW1lKGJhc2VOYW1lKTtcbiAgICBsZXQgbmFtZSA9IGJhc2VOYW1lO1xuICAgIHdoaWxlICh0aGlzLnVzZWROYW1lcy5oYXMobmFtZSkpIHtcbiAgICAgIG5hbWUgPSBgJHtiYXNlTmFtZX0keysraX1gO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZTtcbiAgfVxufVxuXG4vKipcbiAqIFNhbml0aXplIGEgc3RyaW5nIHRvIGJlIGEgdmFsaWQgYXJ0aWZhY3QgbmFtZVxuICpcbiAqIFRoaXMgbXVzdCBjb21wb3J0IHRvIGJvdGggdGhlIHJ1bGVzIG9mIGFydGlmYWN0cyBpbiBDb2RlUGlwZWxpbmUsIGFzIHdlbGxcbiAqIGFzIHRoZSBuYW1lcyBvZiBTb3VyY2UgSWRlbnRpZmllcnMgaW4gQ29kZUJ1aWxkLlxuICpcbiAqIEFydGlmYWN0IE5hbWUgbGltaXRzIGFyZW4ndCBkb2N1bWVudGVkLlxuICpcbiAqIFNvdXJjZSBJZGVudGlmaWVyIGxpbWl0cyBhcmUgZG9jdW1lbnRlZCBoZXJlOlxuICogaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2NvZGVidWlsZC9sYXRlc3QvQVBJUmVmZXJlbmNlL0FQSV9Qcm9qZWN0U291cmNlLmh0bWwjQ29kZUJ1aWxkLVR5cGUtUHJvamVjdFNvdXJjZS1zb3VyY2VJZGVudGlmaWVyXG4gKi9cbmZ1bmN0aW9uIHNhbml0aXplQXJ0aWZhY3ROYW1lKHg6IHN0cmluZyk6IHN0cmluZyB7XG4gIGxldCBzYW5pID0geC5yZXBsYWNlKC9bXkEtWmEtejAtOV9dL2csICdfJyk7IC8vIENoYXJzZXQgcmVxdWlyZW1lbnQgaXMgaW1wb3NlZCBieSBDb2RlQnVpbGRcbiAgY29uc3QgbWF4TGVuZ3RoID0gMTAwOyAvLyBNYXggbGVuZ3RoIG9mIDEwMCBpcyBpbXBvc2VkIGJ5IENvZGVQaXBlbGluZSBsaWJyYXJ5XG5cbiAgaWYgKHNhbmkubGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgY29uc3QgZmluZ2VycHJpbnQgPSBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKHNhbmkpLmRpZ2VzdCgnaGV4Jykuc3Vic3RyKDAsIDgpO1xuICAgIHNhbmkgPSBzYW5pLnN1YnN0cigwLCBtYXhMZW5ndGggLSBmaW5nZXJwcmludC5sZW5ndGgpICsgZmluZ2VycHJpbnQ7XG4gIH1cblxuICByZXR1cm4gc2FuaTtcbn1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGNsYXNzIENvZGVQaXBlbGluZUZpbGVTZXQgZXh0ZW5kcyBGaWxlU2V0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgc3RhdGljIGZyb21BcnRpZmFjdChhcnRpZmFjdDogY3AuQXJ0aWZhY3QpIHtcbiAgICByZXR1cm4gbmV3IENvZGVQaXBlbGluZUZpbGVTZXQoYXJ0aWZhY3QpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBhcnRpZmFjdCB0aGlzIGNsYXNzIGlzIHdyYXBwaW5nXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IF9hcnRpZmFjdDogY3AuQXJ0aWZhY3Q7XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihhcnRpZmFjdDogY3AuQXJ0aWZhY3QpIHtcbiAgICBzdXBlcihhcnRpZmFjdC5hcnRpZmFjdE5hbWUgPz8gJ0ltcG9ydGVkJywgUGlwZWxpbmVHcmFwaC5OT19TVEVQKTtcbiAgICB0aGlzLl9hcnRpZmFjdCA9IGFydGlmYWN0O1xuICB9XG59Il19
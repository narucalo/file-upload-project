"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfirmPermissionsBroadening = void 0;
const jsiiDeprecationWarnings = require("../../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cpa = require("../../../aws-codepipeline-actions");
const constructs_1 = require("constructs");
const blueprint_1 = require("../blueprint");
const application_security_check_1 = require("../private/application-security-check");
/**
 * Pause the pipeline if a deployment would add IAM permissions or Security Group rules.
 *
 * This step is only supported in CodePipeline pipelines.
 *
 * @stability stable
 */
class ConfirmPermissionsBroadening extends blueprint_1.Step {
    /**
     * @stability stable
     */
    constructor(id, props) {
        super(id);
        this.props = props;
        jsiiDeprecationWarnings.aws_cdk_lib_pipelines_PermissionsBroadeningCheckProps(props);
    }
    /**
     * Create the desired Action and add it to the pipeline.
     *
     * @stability stable
     */
    produceAction(stage, options) {
        var _b;
        jsiiDeprecationWarnings.aws_cdk_lib_aws_codepipeline_IStage(stage);
        jsiiDeprecationWarnings.aws_cdk_lib_pipelines_ProduceActionOptions(options);
        const sec = this.getOrCreateSecCheck(options.pipeline);
        (_b = this.props.notificationTopic) === null || _b === void 0 ? void 0 : _b.grantPublish(sec.cdkDiffProject);
        const variablesNamespace = constructs_1.Node.of(this.props.stage).addr;
        const approveActionName = `${options.actionName}.Confirm`;
        stage.addAction(new cpa.CodeBuildAction({
            runOrder: options.runOrder,
            actionName: `${options.actionName}.Check`,
            input: options.artifacts.toCodePipeline(options.pipeline.cloudAssemblyFileSet),
            project: sec.cdkDiffProject,
            variablesNamespace,
            environmentVariables: {
                STAGE_PATH: { value: constructs_1.Node.of(this.props.stage).path },
                STAGE_NAME: { value: stage.stageName },
                ACTION_NAME: { value: approveActionName },
                ...this.props.notificationTopic ? {
                    NOTIFICATION_ARN: { value: this.props.notificationTopic.topicArn },
                    NOTIFICATION_SUBJECT: { value: `Confirm permission broadening in ${this.props.stage.stageName}` },
                } : {},
            },
        }));
        stage.addAction(new cpa.ManualApprovalAction({
            actionName: approveActionName,
            runOrder: options.runOrder + 1,
            additionalInformation: `#{${variablesNamespace}.MESSAGE}`,
            externalEntityLink: `#{${variablesNamespace}.LINK}`,
        }));
        return { runOrdersConsumed: 2 };
    }
    getOrCreateSecCheck(pipeline) {
        const id = 'PipelinesSecurityCheck';
        const existing = constructs_1.Node.of(pipeline).tryFindChild(id);
        if (existing) {
            if (!(existing instanceof application_security_check_1.ApplicationSecurityCheck)) {
                throw new Error(`Expected '${constructs_1.Node.of(existing).path}' to be 'ApplicationSecurityCheck' but was '${existing}'`);
            }
            return existing;
        }
        return new application_security_check_1.ApplicationSecurityCheck(pipeline, id, {
            codePipeline: pipeline.pipeline,
        });
    }
}
exports.ConfirmPermissionsBroadening = ConfirmPermissionsBroadening;
_a = JSII_RTTI_SYMBOL_1;
ConfirmPermissionsBroadening[_a] = { fqn: "aws-cdk-lib.pipelines.ConfirmPermissionsBroadening", version: "2.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlybS1wZXJtaXNzaW9ucy1icm9hZGVuaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uZmlybS1wZXJtaXNzaW9ucy1icm9hZGVuaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLHlEQUF5RDtBQUd6RCwyQ0FBa0M7QUFDbEMsNENBQW9DO0FBQ3BDLHNGQUFpRjs7Ozs7Ozs7QUFjakYsTUFBYSw0QkFBNkIsU0FBUSxnQkFBSTs7OztJQUNwRCxZQUFZLEVBQVUsRUFBbUIsS0FBc0M7UUFDN0UsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRDZCLFVBQUssR0FBTCxLQUFLLENBQWlDOztLQUU5RTs7Ozs7O0lBRU0sYUFBYSxDQUFDLEtBQWEsRUFBRSxPQUE2Qjs7OztRQUMvRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZELE1BQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsMENBQUUsWUFBWSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUU7UUFFL0QsTUFBTSxrQkFBa0IsR0FBRyxpQkFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQztRQUUxRCxNQUFNLGlCQUFpQixHQUFHLEdBQUcsT0FBTyxDQUFDLFVBQVUsVUFBVSxDQUFDO1FBQzFELEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLENBQUMsZUFBZSxDQUFDO1lBQ3RDLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUTtZQUMxQixVQUFVLEVBQUUsR0FBRyxPQUFPLENBQUMsVUFBVSxRQUFRO1lBQ3pDLEtBQUssRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDO1lBQzlFLE9BQU8sRUFBRSxHQUFHLENBQUMsY0FBYztZQUMzQixrQkFBa0I7WUFDbEIsb0JBQW9CLEVBQUU7Z0JBQ3BCLFVBQVUsRUFBRSxFQUFFLEtBQUssRUFBRSxpQkFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRTtnQkFDckQsVUFBVSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxTQUFTLEVBQUU7Z0JBQ3RDLFdBQVcsRUFBRSxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRTtnQkFDekMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztvQkFDaEMsZ0JBQWdCLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUU7b0JBQ2xFLG9CQUFvQixFQUFFLEVBQUUsS0FBSyxFQUFFLG9DQUFvQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsRUFBRTtpQkFDbEcsQ0FBQyxDQUFDLENBQUMsRUFBRTthQUNQO1NBQ0YsQ0FBQyxDQUFDLENBQUM7UUFFSixLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxDQUFDLG9CQUFvQixDQUFDO1lBQzNDLFVBQVUsRUFBRSxpQkFBaUI7WUFDN0IsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEdBQUcsQ0FBQztZQUM5QixxQkFBcUIsRUFBRSxLQUFLLGtCQUFrQixXQUFXO1lBQ3pELGtCQUFrQixFQUFFLEtBQUssa0JBQWtCLFFBQVE7U0FDcEQsQ0FBQyxDQUFDLENBQUM7UUFFSixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyxFQUFFLENBQUM7S0FDakM7SUFFTyxtQkFBbUIsQ0FBQyxRQUFzQjtRQUNoRCxNQUFNLEVBQUUsR0FBRyx3QkFBd0IsQ0FBQztRQUNwQyxNQUFNLFFBQVEsR0FBRyxpQkFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDcEQsSUFBSSxRQUFRLEVBQUU7WUFDWixJQUFJLENBQUMsQ0FBQyxRQUFRLFlBQVkscURBQXdCLENBQUMsRUFBRTtnQkFDbkQsTUFBTSxJQUFJLEtBQUssQ0FBQyxhQUFhLGlCQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksK0NBQStDLFFBQVEsR0FBRyxDQUFDLENBQUM7YUFDaEg7WUFDRCxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUVELE9BQU8sSUFBSSxxREFBd0IsQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFO1lBQ2hELFlBQVksRUFBRSxRQUFRLENBQUMsUUFBUTtTQUNoQyxDQUFDLENBQUM7S0FDSjs7QUFwREgsb0VBcURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVN0YWdlIH0gZnJvbSAnLi4vLi4vLi4vYXdzLWNvZGVwaXBlbGluZSc7XG5pbXBvcnQgKiBhcyBjcGEgZnJvbSAnLi4vLi4vLi4vYXdzLWNvZGVwaXBlbGluZS1hY3Rpb25zJztcbmltcG9ydCAqIGFzIHNucyBmcm9tICcuLi8uLi8uLi9hd3Mtc25zJztcbmltcG9ydCB7IFN0YWdlIH0gZnJvbSAnLi4vLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBTdGVwIH0gZnJvbSAnLi4vYmx1ZXByaW50JztcbmltcG9ydCB7IEFwcGxpY2F0aW9uU2VjdXJpdHlDaGVjayB9IGZyb20gJy4uL3ByaXZhdGUvYXBwbGljYXRpb24tc2VjdXJpdHktY2hlY2snO1xuaW1wb3J0IHsgQ29kZVBpcGVsaW5lIH0gZnJvbSAnLi9jb2RlcGlwZWxpbmUnO1xuaW1wb3J0IHsgQ29kZVBpcGVsaW5lQWN0aW9uRmFjdG9yeVJlc3VsdCwgSUNvZGVQaXBlbGluZUFjdGlvbkZhY3RvcnksIFByb2R1Y2VBY3Rpb25PcHRpb25zIH0gZnJvbSAnLi9jb2RlcGlwZWxpbmUtYWN0aW9uLWZhY3RvcnknO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGludGVyZmFjZSBQZXJtaXNzaW9uc0Jyb2FkZW5pbmdDaGVja1Byb3BzIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IHN0YWdlOiBTdGFnZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcmVhZG9ubHkgbm90aWZpY2F0aW9uVG9waWM/OiBzbnMuSVRvcGljXG59XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGNsYXNzIENvbmZpcm1QZXJtaXNzaW9uc0Jyb2FkZW5pbmcgZXh0ZW5kcyBTdGVwIGltcGxlbWVudHMgSUNvZGVQaXBlbGluZUFjdGlvbkZhY3Rvcnkge1xuICBjb25zdHJ1Y3RvcihpZDogc3RyaW5nLCBwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBQZXJtaXNzaW9uc0Jyb2FkZW5pbmdDaGVja1Byb3BzKSB7XG4gICAgc3VwZXIoaWQpO1xuICB9XG5cbiAgcHVibGljIHByb2R1Y2VBY3Rpb24oc3RhZ2U6IElTdGFnZSwgb3B0aW9uczogUHJvZHVjZUFjdGlvbk9wdGlvbnMpOiBDb2RlUGlwZWxpbmVBY3Rpb25GYWN0b3J5UmVzdWx0IHtcbiAgICBjb25zdCBzZWMgPSB0aGlzLmdldE9yQ3JlYXRlU2VjQ2hlY2sob3B0aW9ucy5waXBlbGluZSk7XG4gICAgdGhpcy5wcm9wcy5ub3RpZmljYXRpb25Ub3BpYz8uZ3JhbnRQdWJsaXNoKHNlYy5jZGtEaWZmUHJvamVjdCk7XG5cbiAgICBjb25zdCB2YXJpYWJsZXNOYW1lc3BhY2UgPSBOb2RlLm9mKHRoaXMucHJvcHMuc3RhZ2UpLmFkZHI7XG5cbiAgICBjb25zdCBhcHByb3ZlQWN0aW9uTmFtZSA9IGAke29wdGlvbnMuYWN0aW9uTmFtZX0uQ29uZmlybWA7XG4gICAgc3RhZ2UuYWRkQWN0aW9uKG5ldyBjcGEuQ29kZUJ1aWxkQWN0aW9uKHtcbiAgICAgIHJ1bk9yZGVyOiBvcHRpb25zLnJ1bk9yZGVyLFxuICAgICAgYWN0aW9uTmFtZTogYCR7b3B0aW9ucy5hY3Rpb25OYW1lfS5DaGVja2AsXG4gICAgICBpbnB1dDogb3B0aW9ucy5hcnRpZmFjdHMudG9Db2RlUGlwZWxpbmUob3B0aW9ucy5waXBlbGluZS5jbG91ZEFzc2VtYmx5RmlsZVNldCksXG4gICAgICBwcm9qZWN0OiBzZWMuY2RrRGlmZlByb2plY3QsXG4gICAgICB2YXJpYWJsZXNOYW1lc3BhY2UsXG4gICAgICBlbnZpcm9ubWVudFZhcmlhYmxlczoge1xuICAgICAgICBTVEFHRV9QQVRIOiB7IHZhbHVlOiBOb2RlLm9mKHRoaXMucHJvcHMuc3RhZ2UpLnBhdGggfSxcbiAgICAgICAgU1RBR0VfTkFNRTogeyB2YWx1ZTogc3RhZ2Uuc3RhZ2VOYW1lIH0sXG4gICAgICAgIEFDVElPTl9OQU1FOiB7IHZhbHVlOiBhcHByb3ZlQWN0aW9uTmFtZSB9LFxuICAgICAgICAuLi50aGlzLnByb3BzLm5vdGlmaWNhdGlvblRvcGljID8ge1xuICAgICAgICAgIE5PVElGSUNBVElPTl9BUk46IHsgdmFsdWU6IHRoaXMucHJvcHMubm90aWZpY2F0aW9uVG9waWMudG9waWNBcm4gfSxcbiAgICAgICAgICBOT1RJRklDQVRJT05fU1VCSkVDVDogeyB2YWx1ZTogYENvbmZpcm0gcGVybWlzc2lvbiBicm9hZGVuaW5nIGluICR7dGhpcy5wcm9wcy5zdGFnZS5zdGFnZU5hbWV9YCB9LFxuICAgICAgICB9IDoge30sXG4gICAgICB9LFxuICAgIH0pKTtcblxuICAgIHN0YWdlLmFkZEFjdGlvbihuZXcgY3BhLk1hbnVhbEFwcHJvdmFsQWN0aW9uKHtcbiAgICAgIGFjdGlvbk5hbWU6IGFwcHJvdmVBY3Rpb25OYW1lLFxuICAgICAgcnVuT3JkZXI6IG9wdGlvbnMucnVuT3JkZXIgKyAxLFxuICAgICAgYWRkaXRpb25hbEluZm9ybWF0aW9uOiBgI3ske3ZhcmlhYmxlc05hbWVzcGFjZX0uTUVTU0FHRX1gLFxuICAgICAgZXh0ZXJuYWxFbnRpdHlMaW5rOiBgI3ske3ZhcmlhYmxlc05hbWVzcGFjZX0uTElOS31gLFxuICAgIH0pKTtcblxuICAgIHJldHVybiB7IHJ1bk9yZGVyc0NvbnN1bWVkOiAyIH07XG4gIH1cblxuICBwcml2YXRlIGdldE9yQ3JlYXRlU2VjQ2hlY2socGlwZWxpbmU6IENvZGVQaXBlbGluZSk6IEFwcGxpY2F0aW9uU2VjdXJpdHlDaGVjayB7XG4gICAgY29uc3QgaWQgPSAnUGlwZWxpbmVzU2VjdXJpdHlDaGVjayc7XG4gICAgY29uc3QgZXhpc3RpbmcgPSBOb2RlLm9mKHBpcGVsaW5lKS50cnlGaW5kQ2hpbGQoaWQpO1xuICAgIGlmIChleGlzdGluZykge1xuICAgICAgaWYgKCEoZXhpc3RpbmcgaW5zdGFuY2VvZiBBcHBsaWNhdGlvblNlY3VyaXR5Q2hlY2spKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgJyR7Tm9kZS5vZihleGlzdGluZykucGF0aH0nIHRvIGJlICdBcHBsaWNhdGlvblNlY3VyaXR5Q2hlY2snIGJ1dCB3YXMgJyR7ZXhpc3Rpbmd9J2ApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQXBwbGljYXRpb25TZWN1cml0eUNoZWNrKHBpcGVsaW5lLCBpZCwge1xuICAgICAgY29kZVBpcGVsaW5lOiBwaXBlbGluZS5waXBlbGluZSxcbiAgICB9KTtcbiAgfVxufSJdfQ==
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodePipelineSource = void 0;
const jsiiDeprecationWarnings = require("../../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cp_actions = require("../../../aws-codepipeline-actions");
const core_1 = require("../../../core");
const constructs_1 = require("constructs");
const blueprint_1 = require("../blueprint");
/**
 * CodePipeline source steps.
 *
 * This class contains a number of factory methods for the different types
 * of sources that CodePipeline supports.
 *
 * @stability stable
 */
class CodePipelineSource extends blueprint_1.Step {
    constructor() {
        super(...arguments);
        // tells `PipelineGraph` to hoist a "Source" step
        /**
         * Whether or not this is a Source step.
         *
         * What it means to be a Source step depends on the engine.
         *
         * @stability stable
         */
        this.isSource = true;
    }
    /**
     * Returns a GitHub source, using OAuth tokens to authenticate with GitHub and a separate webhook to detect changes.
     *
     * This is no longer
     * the recommended method. Please consider using `connection()`
     * instead.
     *
     * Pass in the owner and repository in a single string, like this:
     *
     * ```ts
     * pipelines.CodePipelineSource.gitHub('owner/repo', 'main');
     * ```
     *
     * Authentication will be done by a secret called `github-token` in AWS
     * Secrets Manager (unless specified otherwise).
     *
     * The token should have these permissions:
     *
     * * **repo** - to read the repository
     * * **admin:repo_hook** - if you plan to use webhooks (true by default)
     *
     * @stability stable
     */
    static gitHub(repoString, branch, props = {}) {
        jsiiDeprecationWarnings.aws_cdk_lib_pipelines_GitHubSourceOptions(props);
        return new GitHubSource(repoString, branch, props);
    }
    /**
     * Returns an S3 source.
     *
     * @param bucket The bucket where the source code is located.
     * @param props The options, which include the key that identifies the source code file and and how the pipeline should be triggered.
     * @stability stable
     */
    static s3(bucket, objectKey, props = {}) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_s3_IBucket(bucket);
        jsiiDeprecationWarnings.aws_cdk_lib_pipelines_S3SourceOptions(props);
        return new S3Source(bucket, objectKey, props);
    }
    /**
     * Returns a CodeStar connection source.
     *
     * A CodeStar connection allows AWS CodePipeline to
     * access external resources, such as repositories in GitHub, GitHub Enterprise or
     * BitBucket.
     *
     * To use this method, you first need to create a CodeStar connection
     * using the AWS console. In the process, you may have to sign in to the external provider
     * -- GitHub, for example -- to authorize AWS to read and modify your repository.
     * Once you have done this, copy the connection ARN and use it to create the source.
     *
     * Example:
     *
     * ```ts
     * pipelines.CodePipelineSource.connection('owner/repo', 'main', {
     *    connectionArn: 'arn:aws:codestar-connections:us-east-1:222222222222:connection/7d2469ff-514a-4e4f-9003-5ca4a43cdc41', // Created using the AWS console
     * });
     * ```
     *
     * @param repoString A string that encodes owner and repository separated by a slash (e.g. 'owner/repo').
     * @param branch The branch to use.
     * @param props The source properties, including the connection ARN.
     * @see https://docs.aws.amazon.com/dtconsole/latest/userguide/welcome-connections.html
     * @stability stable
     */
    static connection(repoString, branch, props) {
        jsiiDeprecationWarnings.aws_cdk_lib_pipelines_ConnectionSourceOptions(props);
        return new CodeStarConnectionSource(repoString, branch, props);
    }
    /**
     * Returns a CodeCommit source.
     *
     * @param repository The CodeCommit repository.
     * @param branch The branch to use.
     * @param props The source properties.
     * @stability stable
     */
    static codeCommit(repository, branch, props = {}) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_codecommit_IRepository(repository);
        jsiiDeprecationWarnings.aws_cdk_lib_pipelines_CodeCommitSourceOptions(props);
        return new CodeCommitSource(repository, branch, props);
    }
    /**
     * Create the desired Action and add it to the pipeline.
     *
     * @stability stable
     */
    produceAction(stage, options) {
        jsiiDeprecationWarnings.aws_cdk_lib_aws_codepipeline_IStage(stage);
        jsiiDeprecationWarnings.aws_cdk_lib_pipelines_ProduceActionOptions(options);
        const output = options.artifacts.toCodePipeline(this.primaryOutput);
        const action = this.getAction(output, options.actionName, options.runOrder);
        stage.addAction(action);
        return { runOrdersConsumed: 1 };
    }
}
exports.CodePipelineSource = CodePipelineSource;
_a = JSII_RTTI_SYMBOL_1;
CodePipelineSource[_a] = { fqn: "aws-cdk-lib.pipelines.CodePipelineSource", version: "2.0.0" };
/**
 * Extend CodePipelineSource so we can type-test in the CodePipelineEngine.
 */
class GitHubSource extends CodePipelineSource {
    constructor(repoString, branch, props) {
        var _b;
        super(repoString);
        this.branch = branch;
        this.props = props;
        const parts = repoString.split('/');
        if (core_1.Token.isUnresolved(repoString) || parts.length !== 2) {
            throw new Error(`GitHub repository name should be a resolved string like '<owner>/<repo>', got '${repoString}'`);
        }
        this.owner = parts[0];
        this.repo = parts[1];
        this.authentication = (_b = props.authentication) !== null && _b !== void 0 ? _b : core_1.SecretValue.secretsManager('github-token');
        this.configurePrimaryOutput(new blueprint_1.FileSet('Source', this));
    }
    getAction(output, actionName, runOrder) {
        return new cp_actions.GitHubSourceAction({
            output,
            actionName,
            runOrder,
            oauthToken: this.authentication,
            owner: this.owner,
            repo: this.repo,
            branch: this.branch,
            trigger: this.props.trigger,
        });
    }
}
class S3Source extends CodePipelineSource {
    constructor(bucket, objectKey, props) {
        super(constructs_1.Node.of(bucket).addr);
        this.bucket = bucket;
        this.objectKey = objectKey;
        this.props = props;
        this.configurePrimaryOutput(new blueprint_1.FileSet('Source', this));
    }
    getAction(output, _actionName, runOrder) {
        var _b;
        return new cp_actions.S3SourceAction({
            output,
            // Bucket names are guaranteed to conform to ActionName restrictions
            actionName: (_b = this.props.actionName) !== null && _b !== void 0 ? _b : this.bucket.bucketName,
            runOrder,
            bucketKey: this.objectKey,
            trigger: this.props.trigger,
            bucket: this.bucket,
        });
    }
}
class CodeStarConnectionSource extends CodePipelineSource {
    constructor(repoString, branch, props) {
        super(repoString);
        this.branch = branch;
        this.props = props;
        const parts = repoString.split('/');
        if (core_1.Token.isUnresolved(repoString) || parts.length !== 2) {
            throw new Error(`CodeStar repository name should be a resolved string like '<owner>/<repo>', got '${repoString}'`);
        }
        this.owner = parts[0];
        this.repo = parts[1];
        this.configurePrimaryOutput(new blueprint_1.FileSet('Source', this));
    }
    getAction(output, actionName, runOrder) {
        return new cp_actions.CodeStarConnectionsSourceAction({
            output,
            actionName,
            runOrder,
            connectionArn: this.props.connectionArn,
            owner: this.owner,
            repo: this.repo,
            branch: this.branch,
            codeBuildCloneOutput: this.props.codeBuildCloneOutput,
            triggerOnPush: this.props.triggerOnPush,
        });
    }
}
class CodeCommitSource extends CodePipelineSource {
    constructor(repository, branch, props) {
        super(core_1.Token.isUnresolved(repository.repositoryName)
            ? constructs_1.Node.of(repository).addr
            : repository.repositoryName);
        this.repository = repository;
        this.branch = branch;
        this.props = props;
        this.configurePrimaryOutput(new blueprint_1.FileSet('Source', this));
    }
    getAction(output, _actionName, runOrder) {
        return new cp_actions.CodeCommitSourceAction({
            output,
            // Guaranteed to be okay as action name
            actionName: this.repository.repositoryName,
            runOrder,
            branch: this.branch,
            trigger: this.props.trigger,
            repository: this.repository,
            eventRole: this.props.eventRole,
            codeBuildCloneOutput: this.props.codeBuildCloneOutput,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,
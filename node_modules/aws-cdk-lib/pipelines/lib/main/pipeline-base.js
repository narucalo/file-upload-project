"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipelineBase = void 0;
const jsiiDeprecationWarnings = require("../../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("../../../core");
const constructs_1 = require("constructs");
const blueprint_1 = require("../blueprint");
/**
 * A generic CDK Pipelines pipeline.
 *
 * Different deployment systems will provide subclasses of `Pipeline` that generate
 * the deployment infrastructure necessary to deploy CDK apps, specific to that system.
 *
 * This library comes with the `CodePipeline` class, which uses AWS CodePipeline
 * to deploy CDK apps.
 *
 * The actual pipeline infrastructure is constructed (by invoking the engine)
 * when `buildPipeline()` is called, or when `app.synth()` is called (whichever
 * happens first).
 *
 * @stability stable
 */
class PipelineBase extends constructs_1.Construct {
    /**
     * @stability stable
     */
    constructor(scope, id, props) {
        super(scope, id);
        this.built = false;
        jsiiDeprecationWarnings.aws_cdk_lib_pipelines_PipelineBaseProps(props);
        if (props.synth instanceof blueprint_1.ShellStep && !props.synth.primaryOutput) {
            props.synth.primaryOutputDirectory('cdk.out');
        }
        if (!props.synth.primaryOutput) {
            throw new Error(`synthStep ${props.synth} must produce a primary output, but is not producing anything. Configure the Step differently or use a different Step type.`);
        }
        this.synth = props.synth;
        this.waves = [];
        this.cloudAssemblyFileSet = props.synth.primaryOutput;
        core_1.Aspects.of(this).add({ visit: () => this.buildJustInTime() });
    }
    /**
     * Deploy a single Stage by itself.
     *
     * Add a Stage to the pipeline, to be deployed in sequence with other
     * Stages added to the pipeline. All Stacks in the stage will be deployed
     * in an order automatically determined by their relative dependencies.
     *
     * @stability stable
     */
    addStage(stage, options) {
        jsiiDeprecationWarnings.aws_cdk_lib_Stage(stage);
        jsiiDeprecationWarnings.aws_cdk_lib_pipelines_AddStageOpts(options);
        if (this.built) {
            throw new Error('addStage: can\'t add Stages anymore after buildPipeline() has been called');
        }
        return this.addWave(stage.stageName).addStage(stage, options);
    }
    /**
     * Add a Wave to the pipeline, for deploying multiple Stages in parallel.
     *
     * Use the return object of this method to deploy multiple stages in parallel.
     *
     * Example:
     *
     * ```ts
     * declare const pipeline: pipelines.CodePipeline;
     *
     * const wave = pipeline.addWave('MyWave');
     * wave.addStage(new MyApplicationStage(this, 'Stage1'));
     * wave.addStage(new MyApplicationStage(this, 'Stage2'));
     * ```
     *
     * @stability stable
     */
    addWave(id, options) {
        jsiiDeprecationWarnings.aws_cdk_lib_pipelines_WaveOptions(options);
        if (this.built) {
            throw new Error('addWave: can\'t add Waves anymore after buildPipeline() has been called');
        }
        const wave = new blueprint_1.Wave(id, options);
        this.waves.push(wave);
        return wave;
    }
    /**
     * Send the current pipeline definition to the engine, and construct the pipeline.
     *
     * It is not possible to modify the pipeline after calling this method.
     *
     * @stability stable
     */
    buildPipeline() {
        if (this.built) {
            throw new Error('build() has already been called: can only call it once');
        }
        this.doBuildPipeline();
        this.built = true;
    }
    /**
     * Automatically call 'build()' just before synthesis if the user hasn't explicitly called it yet
     */
    buildJustInTime() {
        if (!this.built) {
            this.buildPipeline();
        }
    }
}
exports.PipelineBase = PipelineBase;
_a = JSII_RTTI_SYMBOL_1;
PipelineBase[_a] = { fqn: "aws-cdk-lib.pipelines.PipelineBase", version: "2.0.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmUtYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBpcGVsaW5lLWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsd0NBQStDO0FBQy9DLDJDQUF1QztBQUN2Qyw0Q0FBcUg7Ozs7Ozs7Ozs7Ozs7Ozs7QUFTckgsTUFBc0IsWUFBYSxTQUFRLHNCQUFTOzs7O0lBWWxELFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBd0I7UUFDaEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUhYLFVBQUssR0FBRyxLQUFLLENBQUM7O1FBS3BCLElBQUksS0FBSyxDQUFDLEtBQUssWUFBWSxxQkFBUyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUU7WUFDbEUsS0FBSyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMvQztRQUVELElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRTtZQUM5QixNQUFNLElBQUksS0FBSyxDQUFDLGFBQWEsS0FBSyxDQUFDLEtBQUssNkhBQTZILENBQUMsQ0FBQztTQUN4SztRQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsb0JBQW9CLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUM7UUFFdEQsY0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUMvRDs7Ozs7Ozs7OztJQUdNLFFBQVEsQ0FBQyxLQUFZLEVBQUUsT0FBc0I7OztRQUNsRCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxNQUFNLElBQUksS0FBSyxDQUFDLDJFQUEyRSxDQUFDLENBQUM7U0FDOUY7UUFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDL0Q7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUdNLE9BQU8sQ0FBQyxFQUFVLEVBQUUsT0FBcUI7O1FBQzlDLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMseUVBQXlFLENBQUMsQ0FBQztTQUM1RjtRQUVELE1BQU0sSUFBSSxHQUFHLElBQUksZ0JBQUksQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEIsT0FBTyxJQUFJLENBQUM7S0FDYjs7Ozs7Ozs7SUFHTSxhQUFhO1FBQ2xCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsd0RBQXdELENBQUMsQ0FBQztTQUMzRTtRQUNELElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztLQUNuQjtJQUtEOztPQUVHO0lBQ0ssZUFBZTtRQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNmLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN0QjtLQUNGOztBQXBFSCxvQ0FxRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3BlY3RzLCBTdGFnZSB9IGZyb20gJy4uLy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBBZGRTdGFnZU9wdHMgYXMgU3RhZ2VPcHRpb25zLCBXYXZlT3B0aW9ucywgV2F2ZSwgSUZpbGVTZXRQcm9kdWNlciwgU2hlbGxTdGVwLCBGaWxlU2V0IH0gZnJvbSAnLi4vYmx1ZXByaW50JztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmV4cG9ydCBpbnRlcmZhY2UgUGlwZWxpbmVCYXNlUHJvcHMge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcmVhZG9ubHkgc3ludGg6IElGaWxlU2V0UHJvZHVjZXI7XG59XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQaXBlbGluZUJhc2UgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHJlYWRvbmx5IHN5bnRoOiBJRmlsZVNldFByb2R1Y2VyO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyByZWFkb25seSB3YXZlczogV2F2ZVtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgcmVhZG9ubHkgY2xvdWRBc3NlbWJseUZpbGVTZXQ6IEZpbGVTZXQ7XG5cbiAgcHJpdmF0ZSBidWlsdCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBQaXBlbGluZUJhc2VQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICBpZiAocHJvcHMuc3ludGggaW5zdGFuY2VvZiBTaGVsbFN0ZXAgJiYgIXByb3BzLnN5bnRoLnByaW1hcnlPdXRwdXQpIHtcbiAgICAgIHByb3BzLnN5bnRoLnByaW1hcnlPdXRwdXREaXJlY3RvcnkoJ2Nkay5vdXQnKTtcbiAgICB9XG5cbiAgICBpZiAoIXByb3BzLnN5bnRoLnByaW1hcnlPdXRwdXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgc3ludGhTdGVwICR7cHJvcHMuc3ludGh9IG11c3QgcHJvZHVjZSBhIHByaW1hcnkgb3V0cHV0LCBidXQgaXMgbm90IHByb2R1Y2luZyBhbnl0aGluZy4gQ29uZmlndXJlIHRoZSBTdGVwIGRpZmZlcmVudGx5IG9yIHVzZSBhIGRpZmZlcmVudCBTdGVwIHR5cGUuYCk7XG4gICAgfVxuXG4gICAgdGhpcy5zeW50aCA9IHByb3BzLnN5bnRoO1xuICAgIHRoaXMud2F2ZXMgPSBbXTtcbiAgICB0aGlzLmNsb3VkQXNzZW1ibHlGaWxlU2V0ID0gcHJvcHMuc3ludGgucHJpbWFyeU91dHB1dDtcblxuICAgIEFzcGVjdHMub2YodGhpcykuYWRkKHsgdmlzaXQ6ICgpID0+IHRoaXMuYnVpbGRKdXN0SW5UaW1lKCkgfSk7XG4gIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIGFkZFN0YWdlKHN0YWdlOiBTdGFnZSwgb3B0aW9ucz86IFN0YWdlT3B0aW9ucykge1xuICAgIGlmICh0aGlzLmJ1aWx0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FkZFN0YWdlOiBjYW5cXCd0IGFkZCBTdGFnZXMgYW55bW9yZSBhZnRlciBidWlsZFBpcGVsaW5lKCkgaGFzIGJlZW4gY2FsbGVkJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFkZFdhdmUoc3RhZ2Uuc3RhZ2VOYW1lKS5hZGRTdGFnZShzdGFnZSwgb3B0aW9ucyk7XG4gIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIGFkZFdhdmUoaWQ6IHN0cmluZywgb3B0aW9ucz86IFdhdmVPcHRpb25zKSB7XG4gICAgaWYgKHRoaXMuYnVpbHQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYWRkV2F2ZTogY2FuXFwndCBhZGQgV2F2ZXMgYW55bW9yZSBhZnRlciBidWlsZFBpcGVsaW5lKCkgaGFzIGJlZW4gY2FsbGVkJyk7XG4gICAgfVxuXG4gICAgY29uc3Qgd2F2ZSA9IG5ldyBXYXZlKGlkLCBvcHRpb25zKTtcbiAgICB0aGlzLndhdmVzLnB1c2god2F2ZSk7XG4gICAgcmV0dXJuIHdhdmU7XG4gIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyBidWlsZFBpcGVsaW5lKCkge1xuICAgIGlmICh0aGlzLmJ1aWx0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2J1aWxkKCkgaGFzIGFscmVhZHkgYmVlbiBjYWxsZWQ6IGNhbiBvbmx5IGNhbGwgaXQgb25jZScpO1xuICAgIH1cbiAgICB0aGlzLmRvQnVpbGRQaXBlbGluZSgpO1xuICAgIHRoaXMuYnVpbHQgPSB0cnVlO1xuICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgZG9CdWlsZFBpcGVsaW5lKCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEF1dG9tYXRpY2FsbHkgY2FsbCAnYnVpbGQoKScganVzdCBiZWZvcmUgc3ludGhlc2lzIGlmIHRoZSB1c2VyIGhhc24ndCBleHBsaWNpdGx5IGNhbGxlZCBpdCB5ZXRcbiAgICovXG4gIHByaXZhdGUgYnVpbGRKdXN0SW5UaW1lKCkge1xuICAgIGlmICghdGhpcy5idWlsdCkge1xuICAgICAgdGhpcy5idWlsZFBpcGVsaW5lKCk7XG4gICAgfVxuICB9XG59Il19
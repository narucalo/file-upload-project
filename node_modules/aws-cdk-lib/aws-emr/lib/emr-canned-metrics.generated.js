"use strict";
// Copyright 2012-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElasticMapReduceMetrics = void 0;
/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control
class ElasticMapReduceMetrics {
    static jobsRunningAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'JobsRunning',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static jobsFailedAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'JobsFailed',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static isIdleAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'IsIdle',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static mapTasksRunningAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'MapTasksRunning',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static mapTasksRemainingAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'MapTasksRemaining',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static mapSlotsOpenAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'MapSlotsOpen',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static remainingMapTasksPerSlotAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'RemainingMapTasksPerSlot',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static reduceTasksRunningAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'ReduceTasksRunning',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static reduceTasksRemainingAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'ReduceTasksRemaining',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static reduceSlotsOpenAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'ReduceSlotsOpen',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static coreNodesRunningAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'CoreNodesRunning',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static coreNodesPendingAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'CoreNodesPending',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static liveDataNodesAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'LiveDataNodes',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static taskNodesRunningAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'TaskNodesRunning',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static taskNodesPendingAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'TaskNodesPending',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static liveTaskTrackersAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'LiveTaskTrackers',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static s3BytesWrittenSum(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'S3BytesWritten',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static s3BytesReadSum(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'S3BytesRead',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static hdfsUtilizationAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'HDFSUtilization',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static hdfsBytesReadSum(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'HDFSBytesRead',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static hdfsBytesWrittenSum(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'HDFSBytesWritten',
            dimensionsMap: dimensions,
            statistic: 'Sum',
        };
    }
    static missingBlocksAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'MissingBlocks',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static totalLoadAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'TotalLoad',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static backupFailedAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'BackupFailed',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static mostRecentBackupDurationAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'MostRecentBackupDuration',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
    static timeSinceLastSuccessfulBackupAverage(dimensions) {
        return {
            namespace: 'AWS/ElasticMapReduce',
            metricName: 'TimeSinceLastSuccessfulBackup',
            dimensionsMap: dimensions,
            statistic: 'Average',
        };
    }
}
exports.ElasticMapReduceMetrics = ElasticMapReduceMetrics;
//# sourceMappingURL=data:application/json;base64,